<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>监控系统的搭建与应用</title>
      <link href="/yoonada/yoonada.github.io/2024/09/16/jian-kong-xi-tong-de-da-jian-yu-ying-yong/"/>
      <url>/yoonada/yoonada.github.io/2024/09/16/jian-kong-xi-tong-de-da-jian-yu-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Prometheus-Grafana搭建服务器监控"><a href="#基于Prometheus-Grafana搭建服务器监控" class="headerlink" title="基于Prometheus+Grafana搭建服务器监控"></a>基于Prometheus+Grafana搭建服务器监控</h1><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="官方仓库"><a href="#官方仓库" class="headerlink" title="官方仓库"></a>官方仓库</h3><p><a href="https://github.com/prometheus">https://github.com/prometheus</a></p><p><a href="https://github.com/prometheus/node_exporter">https://github.com/prometheus/node_exporter</a></p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>需了解当前服务器的CPU架构，才知道如何选择安装包</p><p>判断服务器需要 ARM 包还是 AMD 包，主要依据服务器的 CPU 架构。具体步骤如下：</p><ol><li><strong>查看服务器的 CPU 架构：</strong><ul><li>你可以通过命令 <code>lscpu</code> 来查看 CPU 的架构信息。输出的 <code>Architecture</code> 字段可以告诉你当前系统的 CPU 架构。</li><li>对于 <strong>ARM 架构</strong>，<code>Architecture</code> 会显示为 <code>armv7l</code>、<code>aarch64</code> 等。</li><li>对于 <strong>AMD 或 Intel 架构</strong>（通常是 x86 架构），<code>Architecture</code> 会显示为 <code>x86_64</code>。</li></ul></li><li><strong>安装包选择：</strong><ul><li>如果你的服务器是 ARM 架构（如基于 ARM 的处理器），则需要下载 ARM 版本的安装包（通常后缀是 <code>.arm</code> 或 <code>.aarch64</code>）。</li><li>如果是 AMD 或 Intel 架构（x86_64），则需要下载适合的 AMD 或 Intel 包（通常是 <code>.x86_64</code>）。</li></ul></li></ol><h3 id="node-exporter"><a href="#node-exporter" class="headerlink" title="node_exporter"></a>node_exporter</h3><p>官网链接：<a href="https://github.com/prometheus/node_exporter/releases/tag/v1.7.0">https://github.com/prometheus/node_exporter/releases/tag/v1.7.0</a></p><p>根据不同的CPU架构选择不同的安装包，目前服务器是AMD的，下载的是：node_exporter-1.7.0.linux-amd64.tar.gz</p><h3 id="prometueus"><a href="#prometueus" class="headerlink" title="prometueus"></a>prometueus</h3><p>官网链接：<a href="https://github.com/prometheus/prometheus/releases/tag/v2.49.0">https://github.com/prometheus/prometheus/releases/tag/v2.49.0</a></p><p>根据不同的CPU架构选择不同的安装包，目前服务器是AMD的，下载的是：prometheus-2.49.0.linux-amd64.tar.gz</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="安装node-exporter"><a href="#安装node-exporter" class="headerlink" title="安装node_exporter"></a>安装node_exporter</h4><pre class=" language-shell"><code class="language-shell">cd ../usr/local/mkdir prometheustar -zxvf node_exporter-1.7.0.linux-amd64.tar.gzmv node_exporter-1.7.0.linux-amd64 node_exportervim /etc/systemd/system/node_exporter.service[Unit]Description=node_exportDocumentation=https://github.com/prometheus/node_exporterAfter=network.target[Service]Type=simpleExecStart=/usr/local/prometheus/node_exporter/node_exporterRestart=on-failure[Install]WantedBy=multi-user.targetsystemctl start node_exporterfirewall-cmd --zone=public --add-port=9100/tcp --permanentfirewall-cmd --reloadcurl http://localhost:9100/metrics</code></pre><h4 id="安装prometheus"><a href="#安装prometheus" class="headerlink" title="安装prometheus"></a>安装prometheus</h4><pre class=" language-shell"><code class="language-shell">tar -zxvf prometheus-2.49.0.linux-amd64.tar.gzmv prometheus-2.49.0.linux-amd64 prometheusvim prometheus/prometheus.ymlscrape_configs:  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.  - job_name: "prometheus"    # metrics_path defaults to '/metrics'    # scheme defaults to 'http'.    static_configs:      - targets: ["localhost:9090"]  - job_name: "192.168.83.250"    static_configs:      - targets: ["192.168.83.250:9100"]         - job_name: "192.168.83.251"    static_configs:      - targets: ["192.168.83.251:9100"]        - job_name: "192.168.83.252"    static_configs:      - targets: ["192.168.83.252:9100"]  - job_name: "192.168.83.253"    static_configs:      - targets: ["192.168.83.253:9100"]                        vim /etc/systemd/system/prometheus.service      [Unit]Description=Prometheus Monitoring SystemDocumentation=Prometheus Monitoring System[Service]Type=simpleExecStart=/usr/local/prometheus/prometheus/prometheus \--config.file=/usr/local/prometheus/prometheus/prometheus.yml \--storage.tsdb.path="data/"--storage.tsdb.retention.time=15d--web.max-connections=512--web.listen-address=:9090firewall-cmd --zone=public --add-port=9090/tcp --permanentfirewall-cmd --reloadsystemctl start prometheus</code></pre><h3 id="grafana"><a href="#grafana" class="headerlink" title="grafana"></a>grafana</h3><p><a href="https://grafana.com/grafana/download/10.4.2?pg=get&amp;plcmt=selfmanaged-box1-cta1">https://grafana.com/grafana/download/10.4.2?pg=get&amp;plcmt=selfmanaged-box1-cta1</a></p><pre class=" language-shell"><code class="language-shell">wget https://dl.grafana.com/enterprise/release/grafana-enterprise-10.4.2.linux-amd64.tar.gztar -zxvf grafana-enterprise-10.4.2.linux-amd64.tar.gzmv grafana-v10.4.2/ grafana汉化vi /usr/local/grafana/conf/defaults.ini#default_language = en-USdefault_language = zh-Hanssudo useradd -r grafanasudo groupadd -r grafanasudo chown -R grafana:grafana /usr/local/grafanavim /etc/systemd/system/grafana.service[Unit]Description=GrafanaDocumentation=https://grafana.com/docs/grafana/latest/After=network.target[Service]Type=simpleExecStart=/usr/local/grafana/bin/grafana-server --config /usr/local/grafana/conf/defaults.ini --homepath /usr/local/grafanaUser=grafanaGroup=grafanaRestart=on-failure[Install]WantedBy=multi-user.targetsystemctl daemon-reloadsystemctl enable grafanasystemctl start grafanasystemctl status grafanasudo systemctl status grafana.servicesudo journalctl -u grafana.service -ffirewall-cmd --zone=public --add-port=3000/tcp --permanentfirewall-cmd --reload</code></pre><pre class=" language-shell"><code class="language-shell">https://grafana.com/grafana/dashboards/12633</code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS7 </category>
          
          <category> Grafana </category>
          
          <category> Prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> Grafana </tag>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻量级日志收集系统的搭建与应用</title>
      <link href="/yoonada/yoonada.github.io/2024/09/15/qing-liang-ji-ri-zhi-shou-ji-xi-tong-de-da-jian-yu-ying-yong/"/>
      <url>/yoonada/yoonada.github.io/2024/09/15/qing-liang-ji-ri-zhi-shou-ji-xi-tong-de-da-jian-yu-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="grafana-loki-promtai"><a href="#grafana-loki-promtai" class="headerlink" title="grafana-loki-promtai"></a>grafana-loki-promtai</h1><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://github.com/grafana/loki/releases?page=3">https://github.com/grafana/loki/releases?page=3</a></p><ul><li><a href="https://github.com/grafana/loki/releases/download/v2.9.0/loki-linux-amd64.zip">loki-linux-amd64.zip</a></li><li><a href="https://github.com/grafana/loki/releases/download/v2.9.0/promtail-linux-amd64.zip">promtail-linux-amd64.zip</a></li></ul><h3 id="grafana"><a href="#grafana" class="headerlink" title="grafana"></a>grafana</h3><p><a href="https://grafana.com/grafana/download/10.4.2?pg=get&amp;plcmt=selfmanaged-box1-cta1">https://grafana.com/grafana/download/10.4.2?pg=get&amp;plcmt=selfmanaged-box1-cta1</a></p><pre class=" language-shell"><code class="language-shell">wget https://dl.grafana.com/enterprise/release/grafana-enterprise-10.4.2.linux-amd64.tar.gztar -zxvf grafana-enterprise-10.4.2.linux-amd64.tar.gzmv grafana-v10.4.2/ grafana汉化vi /usr/local/grafana/conf/defaults.ini#default_language = en-USdefault_language = zh-Hanssudo useradd -r grafanasudo groupadd -r grafanasudo chown -R grafana:grafana /usr/local/grafanavim /etc/systemd/system/grafana.service[Unit]Description=GrafanaDocumentation=https://grafana.com/docs/grafana/latest/After=network.target[Service]Type=simpleExecStart=/usr/local/grafana/bin/grafana-server --config /usr/local/grafana/conf/defaults.ini --homepath /usr/local/grafanaUser=grafanaGroup=grafanaRestart=on-failure[Install]WantedBy=multi-user.targetsystemctl daemon-reloadsystemctl enable grafanasystemctl start grafanasystemctl status grafanasudo systemctl status grafana.servicesudo journalctl -u grafana.service -ffirewall-cmd --zone=public --add-port=3000/tcp --permanentfirewall-cmd --reload</code></pre><pre class=" language-shell"><code class="language-shell">https://grafana.com/grafana/dashboards/</code></pre><h3 id="loki"><a href="#loki" class="headerlink" title="loki"></a>loki</h3><p>/usr/local/loki</p><ul><li>loki    （压缩包解压后的二进制文件）</li><li>loki-config.yml   （配置文件）</li></ul><h5 id="loki-config-yml"><a href="#loki-config-yml" class="headerlink" title="loki-config.yml"></a>loki-config.yml</h5><pre class=" language-shell"><code class="language-shell"># 不开启鉴权auth_enabled: false # http和grpc端口server:  http_listen_port: 3100  grpc_listen_port: 9096 # 数据索引和块存储配置common:  path_prefix: /tmp/loki  storage:    filesystem:      chunks_directory: /tmp/loki/chunks      rules_directory: /tmp/loki/rules  replication_factor: 1  ring:    instance_addr: 127.0.0.1    kvstore:      store: inmemory # 缓存管理query_range:  results_cache:    cache:      embedded_cache:        enabled: false # 数据存储管理schema_config:  configs:    - from: 2023-09-01      store: boltdb-shipper      object_store: filesystem      schema: v11      index:        prefix: index_        period: 24h  # 数据块的存储策略chunk_store_config:  max_look_back_period: 240h  # 保存创建数据索引和块等信息的表存储策略table_manager:  retention_deletes_enabled: true  retention_period: 240h # 数据块压缩配置compactor:  working_directory: /tmp/loki/retention  shared_store: filesystem  compaction_interval: 10m  retention_enabled: true  retention_delete_delay: 2h  retention_delete_worker_count: 150</code></pre><pre class=" language-shell"><code class="language-shell">vim /etc/systemd/system/loki.service[Unit]Description=Loki: A horizontally-scalable, highly-available, multi-tenant log aggregation systemDocumentation=https://grafana.com/docs/loki/latest/After=network.target[Service]ExecStart=/usr/local/loki/loki -config.file=/usr/local/loki/loki-config.ymlRestart=alwaysUser=lokiGroup=lokiLimitNOFILE=65536[Install]WantedBy=multi-user.targetsudo useradd --system --no-create-home --shell /bin/false lokisudo chown -R loki:loki /usr/local/loki/lokisudo chmod +x /usr/local/loki/lokisudo systemctl daemon-reloadsudo systemctl start lokisudo systemctl enable lokisudo systemctl status lokisudo journalctl -u loki -ffirewall-cmd --zone=public --add-port=3100/tcp --permanentfirewall-cmd --zone=public --add-port=9096/tcp --permanentfirewall-cmd --reloadhttp://192.168.83.252:3100/metrics</code></pre><h3 id="Promtail"><a href="#Promtail" class="headerlink" title="Promtail"></a>Promtail</h3><p>/usr/local/promtail</p><ul><li>promtail     （压缩包解压后的二进制文件）</li><li>promtail-local-config.yaml    （配置文件）</li></ul><h5 id="promtail-local-config-yaml"><a href="#promtail-local-config-yaml" class="headerlink" title="promtail-local-config.yaml"></a>promtail-local-config.yaml</h5><pre class=" language-shell"><code class="language-shell">server:  http_listen_port: 9080  grpc_listen_port: 0positions:  filename: /tmp/positions.yamlclients:  - url: http://192.168.83.252:3100/loki/api/v1/pushscrape_configs:  - job_name: '250-cyg-cloud-auth'    static_configs:      - targets:          - 192.168.83.250        labels:          job: '250-cyg-cloud-auth'          __path__: /logs/cyg-cloud-auth/cyg-cloud-auth.log          stream: 'stdout'  - job_name: '250-cyg-cloud-fic'    static_configs:      - targets:          - 192.168.83.250        labels:          job: '250-cyg-cloud-fic'          __path__: /logs/cyg-cloud-fic/cyg-cloud-fic.log          stream: 'stdout'  - job_name: '250-cyg-cloud-gateway'    static_configs:      - targets:          - 192.168.83.250        labels:          job: '250-cyg-cloud-gateway'          __path__: /logs/cyg-cloud-gateway/cyg-cloud-gateway.log          stream: 'stdout'</code></pre><pre class=" language-shell"><code class="language-shell">vim /etc/systemd/system/promtail.service[Unit]Description=Promtail: An agent for shipping logs to LokiDocumentation=https://grafana.com/docs/loki/latest/clients/promtail/After=network.target[Service]ExecStart=/usr/local/promtail/promtail -config.file=/usr/local/promtail/promtail-local-config.yamlRestart=alwaysUser=promtailGroup=promtailLimitNOFILE=65536[Install]WantedBy=multi-user.targetsudo useradd --system --no-create-home --shell /bin/false promtailsudo groupadd promtailsudo chmod +x /usr/local/promtail/promtailsudo chown -R promtail:promtail /usr/local/promtail/promtailfirewall-cmd --zone=public --add-port=9080/tcp --permanentfirewall-cmd --zone=public --add-port=22/tcp --permanentfirewall-cmd --zone=public --add-port=3100/tcp --permanentfirewall-cmd --zone=public --add-port=9096/tcp --permanentsudo systemctl daemon-reloadsudo systemctl start promtailsudo systemctl enable promtailsudo systemctl status promtailsudo journalctl -u promtail -f</code></pre><h3 id="可参考文章（仅供参考，有些有坑）"><a href="#可参考文章（仅供参考，有些有坑）" class="headerlink" title="可参考文章（仅供参考，有些有坑）"></a>可参考文章（仅供参考，有些有坑）</h3><p><a href="https://www.cnblogs.com/cao-lei/p/16848665.html">https://www.cnblogs.com/cao-lei/p/16848665.html</a></p><p><a href="https://www.cnblogs.com/n00dle/p/16916044.html">https://www.cnblogs.com/n00dle/p/16916044.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CentOS7 </category>
          
          <category> Grafana </category>
          
          <category> loki </category>
          
          <category> promtail </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> Grafana </tag>
            
            <tag> loki </tag>
            
            <tag> promtail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker镜像源加速更换</title>
      <link href="/yoonada/yoonada.github.io/2024/03/13/docker-jing-xiang-yuan-jia-su-geng-huan/"/>
      <url>/yoonada/yoonada.github.io/2024/03/13/docker-jing-xiang-yuan-jia-su-geng-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="docker镜像源加速更换"><a href="#docker镜像源加速更换" class="headerlink" title="docker镜像源加速更换"></a>docker镜像源加速更换</h1><pre class=" language-sh"><code class="language-sh">sudo tee /etc/docker/daemon.json <<-'EOF'{    "registry-mirrors": [        "https://dockerproxy.com",        "https://mirror.baidubce.com",        "https://ccr.ccs.tencentyun.com",        "https://docker.m.daocloud.io",        "https://docker.nju.edu.cn",        "https://docker.mirrors.ustc.edu.cn"    ]}EOF</code></pre><pre class=" language-sh"><code class="language-sh">sudo systemctl daemon-reload</code></pre><pre class=" language-sh"><code class="language-sh">sudo systemctl restart docker</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装xxl-job</title>
      <link href="/yoonada/yoonada.github.io/2024/01/15/docker-an-zhuang-xxl-job/"/>
      <url>/yoonada/yoonada.github.io/2024/01/15/docker-an-zhuang-xxl-job/</url>
      
        <content type="html"><![CDATA[<h4 id="建库sql"><a href="#建库sql" class="headerlink" title="建库sql"></a>建库sql</h4><pre class=" language-shell"><code class="language-shell">https://github.com/xuxueli/xxl-job/blob/2.4.0/doc/db/tables_xxl_job.sql</code></pre><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class=" language-shell"><code class="language-shell">docker pull xuxueli/xxl-job-admin:2.4.0</code></pre><pre class=" language-shell"><code class="language-shell">mkdir -p /logs/docker</code></pre><pre class=" language-shell"><code class="language-shell">docker run -e PARAMS="--spring.datasource.username=root --spring.datasource.password=xxx --spring.datasource.url=jdbc:mysql://xxx:3306/xxl_job?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai" -p 35000:8080 -v /logs/docker:/data/applogs --name xxl-job-admin -d xuxueli/xxl-job-admin:2.4.0</code></pre><pre class=" language-shell"><code class="language-shell">http://xxx:35000/xxl-job-admin/</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> xxl-job </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> xxl-job </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装docker</title>
      <link href="/yoonada/yoonada.github.io/2023/12/26/ubuntu-an-zhuang-docker/"/>
      <url>/yoonada/yoonada.github.io/2023/12/26/ubuntu-an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">sudo apt-get remove docker \               docker-engine \               docker.io</code></pre><pre class=" language-shell"><code class="language-shell">sudo apt-get update</code></pre><pre class=" language-shell"><code class="language-shell">sudo apt-get install \    apt-transport-https \    ca-certificates \    curl \    gnupg \    lsb-release</code></pre><pre class=" language-shell"><code class="language-shell">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</code></pre><pre class=" language-shell"><code class="language-shell">echo \  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null</code></pre><pre class=" language-shell"><code class="language-shell">sudo apt-get update</code></pre><pre class=" language-shell"><code class="language-shell">sudo apt-get install docker-ce docker-ce-cli containerd.io</code></pre><pre class=" language-shell"><code class="language-shell">sudo systemctl enable docker</code></pre><pre class=" language-shell"><code class="language-shell">sudo systemctl start docker</code></pre><pre class=" language-shell"><code class="language-shell">sudo groupadd docker</code></pre><pre class=" language-shell"><code class="language-shell">sudo usermod -aG docker $USER</code></pre><p>退出当前终端并重新登录</p><pre class=" language-shell"><code class="language-shell">sudo mkdir -p /etc/docker</code></pre><pre class=" language-shell"><code class="language-shell">sudo tee /etc/docker/daemon.json <<-'EOF'{  "registry-mirrors": ["https://9w9zqgnf.mirror.aliyuncs.com"]}EOF</code></pre><pre class=" language-shell"><code class="language-shell">sudo systemctl daemon-reload</code></pre><pre class=" language-shell"><code class="language-shell">sudo systemctl restart docker</code></pre>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装MySQL5.7</title>
      <link href="/yoonada/yoonada.github.io/2023/11/24/centos7-an-zhuang-mysql5-7/"/>
      <url>/yoonada/yoonada.github.io/2023/11/24/centos7-an-zhuang-mysql5-7/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</code></pre><pre class=" language-shell"><code class="language-shell">yum -y install mysql57-community-release-el7-10.noarch.rpm</code></pre><pre class=" language-shell"><code class="language-shell">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</code></pre><pre class=" language-shell"><code class="language-shell">yum -y install mysql-community-server</code></pre><pre class=" language-shell"><code class="language-shell">systemctl start mysqld</code></pre><pre class=" language-shell"><code class="language-shell">systemctl status mysqld</code></pre><pre class=" language-shell"><code class="language-shell">grep "password" /var/log/mysqld.log</code></pre><pre class=" language-shell"><code class="language-shell">mysql -uroot -p</code></pre><pre class=" language-shell"><code class="language-shell">ALTER USER 'root'@'localhost' IDENTIFIED BY 'DD@123456!';</code></pre><pre class=" language-shell"><code class="language-shell">grant all privileges on *.* to 'root'@'%' identified by 'DD@123456!' with grant option;</code></pre><pre class=" language-shell"><code class="language-shell">flush privileges;</code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS7 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装jenkins</title>
      <link href="/yoonada/yoonada.github.io/2023/11/22/centos7-an-zhuang-jenkins/"/>
      <url>/yoonada/yoonada.github.io/2023/11/22/centos7-an-zhuang-jenkins/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/july7/p/17626047.html">https://www.cnblogs.com/july7/p/17626047.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker安装jenkins</title>
      <link href="/yoonada/yoonada.github.io/2023/11/20/docker-an-zhuang-jenkins/"/>
      <url>/yoonada/yoonada.github.io/2023/11/20/docker-an-zhuang-jenkins/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">docker run -d -u root \    --name jenkins \    --restart=always \    -p 30000:8080 \    -p 30001:50000 \    -v jenkins-data:/var/jenkins_home \    -v /var/run/docker.sock:/var/run/docker.sock \    jenkins/jenkins:2.426.1-lts-jdk11</code></pre><pre class=" language-shell"><code class="language-shell">http://10.18.12.88:30000/pluginManager/advanced</code></pre><pre class=" language-shell"><code class="language-shell">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</code></pre><pre class=" language-shell"><code class="language-shell">sed -i 's#https://updates.jenkins.io/download#https://mirrors.tuna.tsinghua.edu.cn/jenkins#g' /var/lib/docker/volumes/jenkins-data/_data/updates/default.json</code></pre><pre class=" language-shell"><code class="language-shell">sed -i 's#http://www.google.com#https://www.baidu.com#g' /var/lib/docker/volumes/jenkins-data/_data/updates/default.json</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django写CRUD</title>
      <link href="/yoonada/yoonada.github.io/2023/08/30/django-xie-crud/"/>
      <url>/yoonada/yoonada.github.io/2023/08/30/django-xie-crud/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Django写CRUD接口"><a href="#基于Django写CRUD接口" class="headerlink" title="基于Django写CRUD接口"></a>基于Django写CRUD接口</h1><h2 id="安装Django相关环境"><a href="#安装Django相关环境" class="headerlink" title="安装Django相关环境"></a>安装Django相关环境</h2><ul><li>安装Django</li></ul><pre class=" language-shell"><code class="language-shell">pip install django</code></pre><ul><li><p>创建Django项目</p><ul><li><p>使用命令行创建（已加入环境变量）</p><pre class=" language-shell"><code class="language-shell">django-admin startproject django_crud_restful</code></pre><p>如果忘记配置环境变量，请配置上，教程如下：</p><p>1、先找一下Python的安装路径</p><pre class=" language-shell"><code class="language-shell">pip -V</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202308251659545.png"></p><p>2、在系统变量的Path最后，追加Python的Scripts路径</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202308251701823.png"></p><pre class=" language-shell"><code class="language-shell">C:\Users\YoonaDa\AppData\Local\Programs\Python\Python311\Scripts\</code></pre></li><li><p>使用PyCharm创建</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202308251707613.png"></p></li></ul></li><li><p>安装 Django REST framework</p></li></ul><pre class=" language-shell"><code class="language-shell">pip install djangorestframework</code></pre><h2 id="新增-x2F-修改配置"><a href="#新增-x2F-修改配置" class="headerlink" title="新增/修改配置"></a>新增/修改配置</h2><h3 id="新建应用"><a href="#新建应用" class="headerlink" title="新建应用"></a>新建应用</h3><ul><li><p>新建应用</p><pre class=" language-shell"><code class="language-shell">cd C:\PycharmProjects\django_crud_restful</code></pre><pre class=" language-shell"><code class="language-shell">python manage.py startapp api</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202308251718648.png"></p></li><li><p>修改settings.py（INSTALLED_APPS中加入刚刚新建的应用的主配置类的路径）</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202308251743958.png"></p></li></ul><h3 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h3><ul><li><p>首先，自己的MySQL（<strong>建议8.x版本</strong>）创建一下数据库，比如：django_crud_restful</p></li><li><p>创建一张测试表吧</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>sys_user<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'自增id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>username<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>phone<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_general_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'手机号码'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>sex<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'性别：0、未知；1、男；2、女；默认为：0'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>is_delete<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'是否删除：0、未删除；1、删除；默认为：0'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>unique_username_index<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>username<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_general_ci <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'系统用户表'</span><span class="token punctuation">;</span></code></pre></li><li><p>命令行安装pymysql</p><pre class=" language-shell"><code class="language-shell">pip install pymysql</code></pre></li><li><p>修改<code>settings.py</code></p><ul><li><p>默认是sqlite3，注释掉</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202308251733334.png"></p></li><li><p>修改为MySQL</p><pre class=" language-shell"><code class="language-shell">DATABASES = {    "default": {        "ENGINE": "django.db.backends.mysql",        "NAME": "django_crud_restful",        "USER": "root",        "PASSWORD": "DD123456aa",        "HOST": "43.142.62.156",        "PORT": "3336",    }}</code></pre></li></ul></li><li><p>修改项目文件夹下的<code>__init__.py</code>文件</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202308251739099.png"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqlpymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>执行迁移命令</p><pre class=" language-python"><code class="language-python">python manage<span class="token punctuation">.</span>py makemigrations</code></pre><pre class=" language-python"><code class="language-python">python manage<span class="token punctuation">.</span>py migrate</code></pre></li></ul><h2 id="编写接口"><a href="#编写接口" class="headerlink" title="编写接口"></a>编写接口</h2><h3 id="逆向工程生成实体"><a href="#逆向工程生成实体" class="headerlink" title="逆向工程生成实体"></a>逆向工程生成实体</h3><ul><li>执行生成命令，生成到db.py中</li></ul><pre class=" language-shell"><code class="language-shell">python manage.py inspectdb > db.py</code></pre><ul><li>拷贝我们的测试表到model.py中</li></ul><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202308251759381.png"></p><h3 id="安装-Django-REST-framework"><a href="#安装-Django-REST-framework" class="headerlink" title="安装 Django REST framework"></a>安装 Django REST framework</h3><ul><li>执行如下命令：</li></ul><pre class=" language-python"><code class="language-python">pip install djangorestframework</code></pre><ul><li>在项目的 <code>settings.py</code> 文件中，将 <code>'rest_framework'</code> 添加到 <code>INSTALLED_APPS</code> 列表</li></ul><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202308251805607.png"></p><ul><li>新建<code>serializers.py</code></li></ul><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202308251808356.png"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> SysUser<span class="token keyword">class</span> <span class="token class-name">SysUserSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> SysUser        fields <span class="token operator">=</span> <span class="token string">'__all__'</span></code></pre><ul><li>修改<code>views.py</code></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> SysUser<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> SysUserSerializer<span class="token keyword">class</span> <span class="token class-name">SysUserViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> SysUser<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> SysUserSerializer</code></pre><ul><li>修改<code>url.py</code></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>routers <span class="token keyword">import</span> DefaultRouter<span class="token keyword">from</span> api<span class="token punctuation">.</span>views <span class="token keyword">import</span> SysUserViewSetrouter <span class="token operator">=</span> DefaultRouter<span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span>register<span class="token punctuation">(</span>r<span class="token string">'users'</span><span class="token punctuation">,</span> SysUserViewSet<span class="token punctuation">)</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'api/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>router<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202308251812430.png"></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p><a href="http://127.0.0.1:8000/api/users/">http://127.0.0.1:8000/api/users/</a></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202308251815618.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyExcel部分学习随笔</title>
      <link href="/yoonada/yoonada.github.io/2023/08/29/easyexcel-bu-fen-xue-xi-sui-bi/"/>
      <url>/yoonada/yoonada.github.io/2023/08/29/easyexcel-bu-fen-xue-xi-sui-bi/</url>
      
        <content type="html"><![CDATA[<h3 id="自己写了一个工具类"><a href="#自己写了一个工具类" class="headerlink" title="自己写了一个工具类"></a>自己写了一个工具类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StrUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>EasyExcel<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>suntang<span class="token punctuation">.</span>dcm<span class="token punctuation">.</span>common<span class="token punctuation">.</span>dto<span class="token punctuation">.</span>ExportExcelDTO<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>suntang<span class="token punctuation">.</span>dcm<span class="token punctuation">.</span>common<span class="token punctuation">.</span>response<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MultipartFile<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLEncoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 校验文件格式是否是Excel     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">verifyFileFormat</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String originalFilename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"originalFilename:{}"</span><span class="token punctuation">,</span> originalFilename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">assert</span> originalFilename <span class="token operator">!=</span> null<span class="token punctuation">;</span>            originalFilename <span class="token operator">=</span> originalFilename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"xls"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"xlsx"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 封装一下基于EasyExcel的导出方法     *     * @param response     * @param excelDTO     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">export</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> ExportExcelDTO excelDTO<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String fileName <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>excelDTO<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/vnd.ms-excel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-disposition"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> <span class="token string">".xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> excelDTO<span class="token punctuation">.</span><span class="token function">getBaseClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span>excelDTO<span class="token punctuation">.</span><span class="token function">getSheetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>excelDTO<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 导出路径上的Excel模板     *     * @param response     * @param filePath     * @param exportFileName     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exportExcelTemplate</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> String filePath<span class="token punctuation">,</span> String exportFileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ExcelUtil.exportExcelTemplate.filePath：{}"</span><span class="token punctuation">,</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构建文件路径</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">.</span>SC_NOT_FOUND<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/plain;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"文件不存在。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String fileName <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>exportFileName<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/vnd.ms-excel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-disposition"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> <span class="token string">".xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将文件写入响应输出流</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>             OutputStream os <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> bytesRead<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bytesRead <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 有表头没数据的模板     *     * @param response     * @param headerList     * @param exportFileName     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exportExcelByHeaderList</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> headerList<span class="token punctuation">,</span> String exportFileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headerList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>res <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> column <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            column<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String fileName <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>exportFileName<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/vnd.ms-excel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-disposition"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> <span class="token string">".xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"sheet1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ExportExcelDTO</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Builder<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: * @date 2022-03-09 18:07 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExportExcelDTO</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 导出时显示的文件名     */</span>    <span class="token keyword">private</span> String fileName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 默认第一个sheet的名字     */</span>    <span class="token keyword">private</span> String sheetName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 数据转换映射的类     */</span>    <span class="token keyword">private</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> baseClass<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 列表数据     */</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> dataList<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>DynamicEasyExcelImportUtil （动态表头导入）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>EasyExcelFactory<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>util<span class="token punctuation">.</span>CollectionUtils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>shaded<span class="token punctuation">.</span>com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span>Lists<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>suntang<span class="token punctuation">.</span>dcm<span class="token punctuation">.</span>dg<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>DynamicEasyExcelListener<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedHashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: * @date 2023-05-10 16:54 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicEasyExcelImportUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 动态获取全部列和数据体     *     * @param stream         excel文件流     * @param parseRowNumber 指定读取行     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> <span class="token function">parseExcelToView</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stream<span class="token punctuation">,</span> Integer parseRowNumber<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>parseRowNumber<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 默认从第一行开始解析数据</span>            parseRowNumber <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        DynamicEasyExcelListener readListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicEasyExcelListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EasyExcelFactory<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">registerReadListener</span><span class="token punctuation">(</span>readListener<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">headRowNumber</span><span class="token punctuation">(</span>parseRowNumber<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">>></span> headList <span class="token operator">=</span> readListener<span class="token punctuation">.</span><span class="token function">getHeadList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>headList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Excel未包含表头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">>></span> dataList <span class="token operator">=</span> readListener<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>dataList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Excel未包含数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取头部,取最后一次解析的列头数据</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> excelHeadIdxNameMap <span class="token operator">=</span> headList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>headList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//封装数据体</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> excelDataList <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> dataRow <span class="token operator">:</span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> rowData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            excelHeadIdxNameMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> rowData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> dataRow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            excelDataList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rowData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> excelDataList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> dataList <span class="token operator">=</span> DynamicEasyExcelImportUtil<span class="token punctuation">.</span><span class="token function">parseExcelToView</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> EasyExcel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> EasyExcel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式</title>
      <link href="/yoonada/yoonada.github.io/2023/08/28/fen-bu-shi/"/>
      <url>/yoonada/yoonada.github.io/2023/08/28/fen-bu-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="分布式与微服务"><a href="#分布式与微服务" class="headerlink" title="分布式与微服务"></a>分布式与微服务</h3><ul><li>分布式<br>分布式系统是由多台计算机（或节点）组成的网络，这些计算机通过网络协议进行协调和合作，共同完成任务或提供服务。在分布式系统中，各个计算机可以分担不同的任务或功能，通过相互通信和协调来实现整体的目标。分布式系统可以在不同的地理位置上运行，可以提高系统的可扩展性、可靠性和性能。</li><li>微服务<br>微服务是一种软件架构风格，将一个大型应用程序拆分成多个小型、独立的服务。每个服务都专注于完成特定的业务功能，并且可以独立部署、扩展和维护。这些服务之间通过网络通信协议进行交互，通常使用轻量级的通信机制，如HTTP或消息队列。微服务架构的目标是使开发团队能够更快速地进行开发、测试和部署，同时提供更好的可维护性和可扩展性。</li></ul><h4 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h4><ul><li>规模和粒度：分布式系统是一个更宽泛的概念，指的是多台计算机协同工作以实现共同目标。微服务是一种特定的架构风格，关注于将应用程序拆分成小型独立服务，每个服务专注于一个特定的业务功能。</li><li>关注点：分布式系统强调多个计算机之间的协同工作和资源共享，以提供更大的系统能力。微服务架构强调在开发和维护阶段将应用程序分解为独立的服务，以促进敏捷开发和部署。</li><li>通信方式：分布式系统中的各个组件可以通过不同的通信方式进行交互，可以是远程调用、消息传递等。微服务架构通常使用HTTP、RESTful API、消息队列等轻量级通信机制。</li><li>部署和维护：微服务架构的服务可以独立部署和维护，这使得团队可以更灵活地更新、扩展或替换单个服务。在分布式系统中，更强调多个计算机之间的协调和一致性，这可能会引入更复杂的部署和维护问题。<br>总之，分布式系统是一个更广泛的概念，指的是多台计算机的协同工作，而微服务是一种特定的架构风格，强调将应用程序拆分成小型独立服务来提高开发效率和系统灵活性。微服务架构可以在分布式系统的基础上实现，但并不是唯一的分布式系统实现方式。</li></ul><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><h4 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h4><p>CAP也就是</p><ul><li>Consistency（一致性）：所有节点访问同一份最新的数据副本</li><li>Availability（可用性）：非故障的节点在合理的时间内返回合理的响应</li><li>Partition Tolerance（分区容错性）：分布式系统出现网络分区的时候，仍然能够对外提供服务</li></ul><p>总结</p><ul><li>CAP理论中，分区容错性P一定要满足的，在此基础上，只能满足可用性A或一致性C。</li><li>分布式系统理论上，不可能选择CA架构，只能选择CP或AP架构。<ul><li>ZooKeeper、HBase就是CP架构</li><li>Eureka是AP架构</li><li>Nacos不仅支持CP架构也支持AP架构</li></ul></li><li>为啥不能选择CA架构呢？ 举个例子：若系统出现“分区”，系统中的某个节点在进行写操作。为了保证 C， 必须要禁止其他节点的读写操作，这就和 A 发生冲突了。如果为了保证 A，其他节点的读写操作正常的话，那就和 C 发生冲突了。</li></ul><h4 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h4><p>ACID 是数据库事务完整性的理论，CAP 是分布式系统设计理论，BASE 是 CAP 理论中 AP 方案的延伸。</p><h3 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h3><p>Spring Cloud Gateway 属于 Spring Cloud 生态系统中的网关，其诞生的目标是为了替代老牌网关 Zuul。</p><ul><li>路由判断：客户端的请求到达网关后，先经过 Gateway Handler Mapping 处理，这里面会做断言（Predicate）判断，看下符合哪个路由规则，这个路由映射后端的某个服务。</li><li>请求过滤：然后请求到达 Gateway Web Handler，这里面有很多过滤器，组成过滤器链（Filter Chain），这些过滤器可以对请求进行拦截和修改，比如添加请求头、参数校验等等，有点像净化污水。然后将请求转发到实际的后端服务。这些过滤器逻辑上可以称作 Pre-Filters，Pre 可以理解为“在…之前”。</li><li>服务处理：后端服务会对请求进行处理。响应过滤：后端处理完结果后，返回给 Gateway 的过滤器再次做处理，逻辑上可以称作 Post-Filters，Post 可以理解为“在…之后”。</li><li>响应返回：响应经过过滤处理后，返回给客户端。</li></ul><p>总结：客户端的请求先通过匹配规则找到合适的路由，就能映射到具体的服务。然后请求经过过滤器处理后转发给具体的服务，服务处理后，再次经过过滤器处理，最后返回给客户端。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的锁</title>
      <link href="/yoonada/yoonada.github.io/2023/08/02/java-de-suo/"/>
      <url>/yoonada/yoonada.github.io/2023/08/02/java-de-suo/</url>
      
        <content type="html"><![CDATA[<h3 id="Java中的锁有哪些？"><a href="#Java中的锁有哪些？" class="headerlink" title="Java中的锁有哪些？"></a>Java中的锁有哪些？</h3><p>Java 中有多种类型的锁，用于实现多线程之间的同步和互斥</p><ul><li>synchronized 锁：Java最常用的锁，可用来实现对象级别的同步</li><li>ReentrantLock：JDK提供的可重入锁，提供了比synchronized更强大的功能，如可中断锁、公平锁等</li><li>ReadWriteLock：JDK提供的读写锁，可分类读访问和写访问，可以提高并发性能</li><li>StampedLock：JDK8引入的锁，支持乐观读取、悲观读取和写入操作。提供更高的并发性能</li><li>CountDownLatch：是一种计数器，允许一个或多个线程登台其他线程执行完特定操作后再继续执行</li></ul><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>CAS（Compare and Swap）是一种并发控制机制，常用于多线程编程和分布式系统中，用于解决并发修改数据时可能引发的竞态条件问题。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul><li>比较操作：从内存中读取当前值与期望值进行比较</li><li>交换操作：如果比较成功（相等），则将新值写入内存中，完成更新操作</li><li>失败处理：如果比较失败（值不相等），则说明其他线程已经修改了值，CAS操作失败，不执行更新。</li></ul><p>在多线程环境下，CAS 可用于实现各种并发算法和数据结构，如无锁队列、计数器、分布式锁等。在分布式系统中，CAS 操作也可以用于实现乐观锁，通过比较版本号等来确保数据的一致性。<br>需要注意的是，虽然 CAS 可以避免了锁的性能问题，但在高并发的情况下，可能会出现 CAS 自旋等待的情况，导致 CPU 资源浪费。因此，CAS 适用于轻量级的并发控制，但在一些特定场景下可能需要考虑其他的并发控制策略。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>准备</title>
      <link href="/yoonada/yoonada.github.io/2023/08/02/zhun-bei/"/>
      <url>/yoonada/yoonada.github.io/2023/08/02/zhun-bei/</url>
      
        <content type="html"><![CDATA[<h4 id="Java锁有哪些"><a href="#Java锁有哪些" class="headerlink" title="Java锁有哪些"></a>Java锁有哪些</h4><h4 id="乐观锁、悲观锁-如何实现"><a href="#乐观锁、悲观锁-如何实现" class="headerlink" title="乐观锁、悲观锁 如何实现"></a>乐观锁、悲观锁 如何实现</h4><h4 id="synchronize-和-cas-如何实现的"><a href="#synchronize-和-cas-如何实现的" class="headerlink" title="synchronize 和 cas 如何实现的"></a>synchronize 和 cas 如何实现的</h4><h4 id="MySQL页分裂"><a href="#MySQL页分裂" class="headerlink" title="MySQL页分裂"></a>MySQL页分裂</h4><p>MySQL分页查询时可能设计到的问题之一就是<strong>页分裂</strong>（Page Splitting）。<br>页分裂指的是在B+树索引结构中，当插入新的记录时，可能会导致索引页分裂成两个页面，从而影响索引的性能。（我们需要保证：后一个数据页中的所有主键值要比前一个数据页中的主键值大）</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><ul><li>合理的插入顺序：在进行大批量插入操作时，可以尽量按照索引的顺序进行插入，从而减少页分裂的可能性。例如，对于自增主键，插入时按照主键顺序插入</li><li>适当的页填充因子</li><li>定期重建索引</li><li>批量插入和事务管理：对于大批量插入操作，可以使用事务进行管理，并适时提交，以减少频繁的页分裂。</li><li>数据库版本和配置</li></ul><h4 id="MySQL页合并"><a href="#MySQL页合并" class="headerlink" title="MySQL页合并"></a>MySQL页合并</h4><p>MySQL中的页合并（Page Merging）是指在B+树索引结构中，当删除记录或者索引项后，可能导致索引页变得太空闲，从而触发合并操作，将相邻的页合并成一个更大的页，以优化索引性能和空间利用率。</p><p>页合并是一种优化操作，它可以减少索引树的深度，提高查询性能。</p><h5 id="触发合并"><a href="#触发合并" class="headerlink" title="触发合并"></a>触发合并</h5><p>当删除了一个记录或索引项后，会留下一个空闲的位置。当空闲位置过多，超过一定阈值时，MySQL 可能会触发页合并操作，将相邻的空闲页合并成一个更大的页。</p><h5 id="合并策略"><a href="#合并策略" class="headerlink" title="合并策略"></a>合并策略</h5><p>基于一种贪心算法，即尝试合并相邻的两个页，以便尽可能减少空闲页的数量。</p><p>InnoDB 的主索引文件中直接存放该行数据，称为聚簇索引，次索引(二级索引)指向对主键的引用；<br>MyISAM 的主索引和次索引，都指向物理行地址(磁盘位置)；<br>InnoDB(聚簇索引)的主键值最好是有序的，不仅能充分使用到索引，还尽可能避免了页分裂；否则就必须进行页分裂来保证索引的逻辑正确性；<br>InnoDB 的主键，尽量使用连续增长的值，而不是随机值(比如随机字符串或UUID), 否则可能产生大量的页分裂；<br>InnoDB的B+树索引注意事项：根页面的位置万年不动，一个页面最少存储2条记录。<br>聚簇索引的叶子节点存储的是行数据；而非聚簇索引叶子节点存储的是聚簇索引（通常是主键-ID）。<br>聚簇索引查询效率更高，而非聚簇索引需要进行回表查询，因此性能不如聚簇索引。<br>聚簇索引一个表中只能有一个，而非聚簇索引则没有数量上的限制。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>认证鉴权</title>
      <link href="/yoonada/yoonada.github.io/2023/07/31/ren-zheng-jian-quan/"/>
      <url>/yoonada/yoonada.github.io/2023/07/31/ren-zheng-jian-quan/</url>
      
        <content type="html"><![CDATA[<h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><h4 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h4><p>JWT（JSON Web Token），是一种用于在网络应用之间传递信息的开放标准。它可以安全地将用户的声明（claim）进行编码。这些声明包括身份认证和授权所需的信息。JWT被广泛用于身份验证和授权机制，尤其在前后端分离的Web应用中</p><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ul><li>Header（头部）：包含描述JWT的元数据信息，例如令牌类型所使用的签名算法。</li><li>Payload（负载）：存储有关用户或其他实体的声明信息，这些信息是以键值对的形式存在的，常用的声明有用户ID、角色、过期时间等。</li><li>Signature（签名）：用于验证消息的完整性，防止数据被篡改。签名由将编码后的Header和Payload与秘密密钥进行加密生成。</li></ul><h3 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h3><p>RBAC（Role-Based Access Control）是一种<strong>基于角色的权限访问控制模式</strong>。基本思想是，对系统操作的各种权限不是直接授予具体用户的，而是在用户集合与权限集合之间建立一个角色集合，每个角色对应一组相应的权限。</p>]]></content>
      
      
      <categories>
          
          <category> 认证鉴权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 认证鉴权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM学习总结</title>
      <link href="/yoonada/yoonada.github.io/2023/07/25/jvm-xue-xi-zong-jie/"/>
      <url>/yoonada/yoonada.github.io/2023/07/25/jvm-xue-xi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="JVM是什么"><a href="#JVM是什么" class="headerlink" title="JVM是什么"></a>JVM是什么</h3><p>JVM（Java Virtual Machine），Java虚拟机，是JRE的一部分。JVM有自己完善的硬件架构，还具备相应的指令系统，是实现跨平台的关键。</p><h3 id="JVM的组成"><a href="#JVM的组成" class="headerlink" title="JVM的组成"></a>JVM的组成</h3><ul><li>类加载子系统</li><li>运行时数据区</li><li>执行引擎<br><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230725165133830.png"></li></ul><h3 id="类加载子系统"><a href="#类加载子系统" class="headerlink" title="类加载子系统"></a>类加载子系统</h3><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><p>类加载器是一个负责加载类的对象，用于实现类加载过程中的加载这一步</p><h4 id="职责"><a href="#职责" class="headerlink" title="职责"></a>职责</h4><p>负责加载字节码文件（.class），而字节码文件存储于本地磁盘中，类加载子系统会以二进制流的方式把字节码文件从物理磁盘加载到内存中（方法去），生成Class对象，该Class对象是作为方法去的这个类的各种数据访问入口。</p><h4 id="类加载的生命周期"><a href="#类加载的生命周期" class="headerlink" title="类加载的生命周期"></a>类加载的生命周期</h4><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230725170607947.png"></p><ul><li>加载：查找并加载类的二进制数据</li><li>连接<ul><li>验证：确保被加载的类的正确性</li><li>准备：为类的静态变量分配内存，并将其初始化为默认值</li><li>解析：把类的符号转换为直接引用</li></ul></li><li>初始化：为类的静态变量赋予正确的初始值，JVM负责对类进行初始化</li><li>使用</li><li>卸载：结束生命周期</li></ul><h4 id="类加载器的层次"><a href="#类加载器的层次" class="headerlink" title="类加载器的层次"></a>类加载器的层次</h4><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230725171120062.png"></p><ul><li>启动类加载器（Bootstrap ClassLoader）：<strong>最顶层的加载类，由C++实现，主要用来加载 JDK 内部的核心类库</strong>（ <code>%JAVA_HOME%/lib</code>目录下的 <code>rt.jar</code>、<code>resources.jar</code>、<code>charsets.jar</code>等 jar 包和类）以及被 <code>-Xbootclasspath</code>参数指定的路径下的所有类。该类加载器<strong>无法</strong>被Java程序直接引用。</li><li>扩展类加载器（Extension ClassLoader）：负责加载JAVA_HOME\lib\，该加载器可以被开发者直接使用。</li><li>应用程序类加载器：ApplicationClassLoader：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。</li><li>自定义类加载器</li></ul><h4 id="JVM有哪些类加载机制"><a href="#JVM有哪些类加载机制" class="headerlink" title="JVM有哪些类加载机制"></a>JVM有哪些类加载机制</h4><ul><li>全盘负责</li><li>父类委托</li><li>缓存机制</li><li>双亲委派机制</li></ul><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230726111420785.png"></p><h4 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h4><p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。</p><h5 id="双亲委派机制过程"><a href="#双亲委派机制过程" class="headerlink" title="双亲委派机制过程"></a>双亲委派机制过程</h5><ul><li>在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载</li><li>类加载器在进行类加载的时候，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成（调用父加载器 <code>loadClass()</code>方法来加载类）。这样的话，所有的请求最终都会传送到顶层的启动类加载器 <code>BootstrapClassLoader</code> 中。</li><li>只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载（调用自己的 <code>findClass()</code> 方法来加载类）。</li></ul><h5 id="双亲委派的好处"><a href="#双亲委派的好处" class="headerlink" title="双亲委派的好处"></a>双亲委派的好处</h5><p><strong>双亲委派模型保证了Java程序的稳定运行，可以避免类的重复加载，也保证了Java的核心API不被篡改</strong>。</p><p>如果没有使用双亲委派模型，而是每个类加载器加载自己的话就会出现一些问题，比如我们编写一个称为 <code>java.lang.Object</code> 类的话，那么程序运行的时候，系统就会出现两个不同的 <code>Object</code> 类。双亲委派模型可以保证加载的是 JRE 里的那个 <code>Object</code> 类，而不是你写的 <code>Object</code> 类。这是因为 <code>AppClassLoader</code> 在加载你的 <code>Object</code> 类时，会委托给 <code>ExtClassLoader</code> 去加载，而 <code>ExtClassLoader</code> 又会委托给 <code>BootstrapClassLoader</code>，<code>BootstrapClassLoader</code> 发现自己已经加载过了 <code>Object</code> 类，会直接返回，不会去加载你写的 <code>Object</code> 类。</p><h3 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h3><p>JVM在执行Java程序的过程中会把它管理的内存划分成若干个不同的数据区域</p><ul><li>堆（Heap）</li><li>方法区（Method Area）</li><li>虚拟机栈（VM Stack）</li><li>本地方法栈（Native Method Stack）</li><li>程序计数器（Program Counter Register）</li></ul><h4 id="线程私有"><a href="#线程私有" class="headerlink" title="线程私有"></a>线程私有</h4><ul><li>程序计数器</li><li>虚拟机栈</li><li>本地方法栈</li></ul><h4 id="线程共享"><a href="#线程共享" class="headerlink" title="线程共享"></a>线程共享</h4><ul><li>堆</li><li>方法区</li></ul><h4 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h4><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230726142110611.png"></p><h4 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h4><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230726142207011.png"></p><h4 id="程序计数器（Program-Counter）"><a href="#程序计数器（Program-Counter）" class="headerlink" title="程序计数器（Program Counter）"></a>程序计数器（Program Counter）</h4><p>程序计数器是一块较小的内存区域，它<strong>存储当前线程正在执行的Java字节码指令的地址或索引</strong>。</p><h4 id="虚拟机栈（VM-Stack）"><a href="#虚拟机栈（VM-Stack）" class="headerlink" title="虚拟机栈（VM Stack）"></a>虚拟机栈（VM Stack）</h4><p>Java虚拟机栈用于存储Java方法的局部变量、方法参数、部分计算结果和方法调用的栈帧信息</p><h4 id="本地方法栈（Native-Method-Stack）"><a href="#本地方法栈（Native-Method-Stack）" class="headerlink" title="本地方法栈（Native Method Stack）"></a>本地方法栈（Native Method Stack）</h4><p>本地方法栈与虚拟机栈类似，但它用于执行Native方法</p><h4 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h4><p>堆是JVM中最大的一块内存区域，用于存储Java对象实例以及数组。在程序运行期间，所有的对象实例都在Java堆中动态分配内存。被所有线程共享，是垃圾回收的主要区域。</p><p>Java堆是垃圾收集器管理的主要区域，因此也称为GC堆（Garbage Collected Heap）</p><h5 id="堆内存的划分"><a href="#堆内存的划分" class="headerlink" title="堆内存的划分"></a>堆内存的划分</h5><h6 id="JDK7及其之前"><a href="#JDK7及其之前" class="headerlink" title="JDK7及其之前"></a>JDK7及其之前</h6><ul><li>新生代内存（Young Generation）</li><li>老生代（Old Generation）</li><li>永生代（Permanent Generation）</li></ul><h6 id="JDK8"><a href="#JDK8" class="headerlink" title="JDK8"></a>JDK8</h6><ul><li>新生代内存（Young Generation）</li><li>老生代（Old Generation）</li><li>元空间（MetaSpace）</li></ul><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230726151527764.png"></p><h6 id="JDK1-7和JDK1-8堆内存的区别"><a href="#JDK1-7和JDK1-8堆内存的区别" class="headerlink" title="JDK1.7和JDK1.8堆内存的区别"></a>JDK1.7和JDK1.8堆内存的区别</h6><ul><li>JDK1.7及之前的版本使用永生代作为方法区的实现。永生代用于存储类的信息、常量、静态变量和即时编译器编译后的代码。因永生代的大小是有限的，且默认情况比较小，故而出经常出现空间溢出的错误</li><li>JDK1.8引入了元空间来替代永生代，元空间并不在虚拟机中，而是使用本地内存。支持自动调整大小</li></ul><p>总结：JDK 1.8的元空间相比于JDK 1.7的永久代在内存管理方面更加灵活和健壮，不易发生内存溢出问题，并且不再需要手动调整永久代的大小。</p><h4 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h4><p>方法区用于存储类的信息、常量、静态变量。线程共享</p><h5 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h5><p>运行时常量池是方法区的一部分，用于存储编译时生成的各种字面量和符号引用</p><h3 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h3><h3 id="JVM参数配置"><a href="#JVM参数配置" class="headerlink" title="JVM参数配置"></a>JVM参数配置</h3><h4 id="调优堆栈内存"><a href="#调优堆栈内存" class="headerlink" title="调优堆栈内存"></a>调优堆栈内存</h4><ul><li>-Xms：最小堆内存</li><li>-Xmx：最大堆内存</li><li>-Xmn：新生代内存大小（Sun官方推荐配置为整个堆的3/8）</li><li>-Xss：线程的栈内存大小</li></ul><h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><ul><li>串行垃圾收集器</li><li>并行垃圾收集器</li><li>CMS垃圾收集器</li><li>G1垃圾收集器</li></ul><h4 id="判断对象是否死亡"><a href="#判断对象是否死亡" class="headerlink" title="判断对象是否死亡"></a>判断对象是否死亡</h4><ul><li>引用计数法：给每一个对象中添加一个计数器，一旦有地方引用了此对象，则该对象的计数器加1，如果引用失效了，则计数器减1。这样当计数器为0时，就代表此对象没有被任何地方引用。</li><li>可达性分析：通过一系列被称为“GCroot”的对象作为起始点，从这些节点开始向下搜索，走过的路径叫做引用链。如果一个对象没有通过引用链连接到GCroot节点，则证明此对象是不可用的</li></ul><h3 id="Full-GC-与-Minor-GC"><a href="#Full-GC-与-Minor-GC" class="headerlink" title="Full GC 与 Minor GC"></a>Full GC 与 Minor GC</h3><ul><li>Minor GC是指对JVM新生代执行的垃圾回收操作。在Minor GC中，只有新生代中的对象会被检查，不再被引用的对象将被回收。存活下来的对象会被移动到Survivor空间或晋升到老年代。Minor GC通常发生频繁，但回收的对象数量相对较少。</li><li>Full GC是指对JVM老年代执行的垃圾回收操作。老年代是存放长时间存活的对象的内存区域。Full GC会对整个堆内存进行垃圾回收，包括新生代和老年代。这种类型的垃圾回收通常会导致较长的停顿时间，因为它需要检查和回收大量的对象。Full GC通常发生较少，但回收的对象数量相对较大。</li></ul><h4 id="触发Full-GC的情况"><a href="#触发Full-GC的情况" class="headerlink" title="触发Full GC的情况"></a>触发Full GC的情况</h4><ul><li><p>老年代内存不足：当老年代中没有足够的空间来分配一个大对象时，会先尝试进行Minor GC，如果任然无法获得足够的空间，则会触发Full GC</p></li><li><p>调用System.gc()：使用System.gc()方法不能保证立即进行垃圾回收，但是这个方法可以提示JVM进行垃圾回收。如果此时需要更多的内存空间，那么就可能会触发Full GC。</p></li><li><p>Perm区空间不足：Perm区是存放类信息和常量池等元数据的区域，如果Perm区没有足够的空间来存放这些信息，就会触发Full GC。</p></li><li><p>CMS GC出现Concurrent Mode Failure：CMS（Concurrent Mark Sweep）是一种以最小化停顿时间为目标的垃圾收集器，在CMS执行过程中，如果应用程序产生了大量更新，导致CMS回收速度跟不上对象生成速度，那么就可能会出现Concurrent Mode Failure，此时会启动Full GC来清理整个堆空间。</p></li><li><p>分配担保失败：在Minor GC后，如果survivor区无法容纳所有幸存对象，那么就要将部分幸存对象转移到老年代。如果老年代剩余空间不足以容纳这些对象，就需要进行Full GC。</p></li><li><p>老年代空间不足</p></li><li><p>永生代、元空间空间不足</p></li><li><p>调用System.gc()</p></li><li></li></ul><h4 id="简述一下JVM的调优经验"><a href="#简述一下JVM的调优经验" class="headerlink" title="简述一下JVM的调优经验"></a>简述一下JVM的调优经验</h4><ul><li>合适的堆内存分配：根据应用程序的需求，分配适当大小的堆内存。过小的堆内存可能导致频繁的垃圾回收，过大的堆内存可能导致长时间的垃圾回收暂停。</li><li>选择合适的垃圾回收器： 根据应用程序的特点和性能需求，选择合适的垃圾回收器。CMS、G1、ZGC、Shenandoah 等垃圾回收器具有不同的特点和适用场景。</li><li>调整垃圾回收参数：根据应用程序的负载和响应时间要求，调整垃圾回收参数，如新生代和老年代的比例、各代的大小、回收策略等。</li><li>避免过度创建对象：避免频繁地创建临时对象，可以减少垃圾回收的负担。使用对象池、重用对象等方式来减少对象创建。</li><li>合理设置 JVM 参数：调整 JVM 参数，如堆大小、栈大小、元空间大小等，以及 GC 相关参数，来适应应用程序的需求。</li><li>性能监控和分析：使用性能监控工具，如 VisualVM、Java Mission Control、Grafana 等，来分析应用程序的性能瓶颈和资源使用情况。</li></ul><p>根据应用程序的需求，分配适当大小的堆内存。比如通过dockerfile打包jar包的时候，我会配置上”-Xmx400m”,”-Xms400m”,”-Xmn150m”,”-Xss1024k”<br>其中，<br>-Xmx400m 设置JVM最大堆内存为400M<br>-Xms400m 设置JVM初始堆内存为400M(与最大值保持一致可以防止每次垃圾回收(GC)后JVM对内存进行再分配)<br>-Xmn150m 设置新生代大小,新生代大小会影响到老年代的大小,Sun推荐设置为总内存的3/8<br>-Xss1024k 每个线程栈大小,值越小能生成的线程数越多,但是一般不超过5000个,在递归场景下值太小可能会造成栈溢出</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7搭建k8s集群</title>
      <link href="/yoonada/yoonada.github.io/2023/05/04/centos7-da-jian-k8s-ji-qun/"/>
      <url>/yoonada/yoonada.github.io/2023/05/04/centos7-da-jian-k8s-ji-qun/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>至少准备三台服务器，其中一台作为master，另外两台作为worker</p><ul><li>192.168.118.128（master）</li><li>192.168.118.129（worker）</li><li>192.168.118.130（worker）</li></ul><h3 id="在所有机器执行以下操作"><a href="#在所有机器执行以下操作" class="headerlink" title="在所有机器执行以下操作"></a>在所有机器执行以下操作</h3><pre class=" language-shell"><code class="language-shell">#各个机器设置自己的域名hostnamectl set-hostname xxxx</code></pre><pre class=" language-shell"><code class="language-shell"># 将 SELinux 设置为 permissive 模式（相当于将其禁用）sudo setenforce 0sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config</code></pre><pre class=" language-shell"><code class="language-shell">#关闭swapswapoff -a  sed -ri 's/.*swap.*/#&/' /etc/fstab</code></pre><pre class=" language-shell"><code class="language-shell">#允许 iptables 检查桥接流量cat <<EOF | sudo tee /etc/modules-load.d/k8s.confbr_netfilterEOF</code></pre><pre class=" language-shell"><code class="language-shell">cat <<EOF | sudo tee /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOF</code></pre><pre class=" language-shell"><code class="language-shell">sudo sysctl --system</code></pre><pre class=" language-shell"><code class="language-shell">cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg   http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgexclude=kubelet kubeadm kubectlEOF</code></pre><pre class=" language-shell"><code class="language-shell">sudo yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 --disableexcludes=kubernetes</code></pre><pre class=" language-shell"><code class="language-shell">sudo systemctl enable --now kubelet</code></pre><pre class=" language-shell"><code class="language-shell">sudo tee ./images.sh <<-'EOF'#!/bin/bashimages=(kube-apiserver:v1.20.9kube-proxy:v1.20.9kube-controller-manager:v1.20.9kube-scheduler:v1.20.9coredns:1.7.0etcd:3.4.13-0pause:3.2)for imageName in ${images[@]} ; dodocker pull registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/$imageNamedoneEOF</code></pre><pre class=" language-shell"><code class="language-shell">chmod +x ./images.sh && ./images.sh</code></pre><h3 id="初始化主节点"><a href="#初始化主节点" class="headerlink" title="初始化主节点"></a>初始化主节点</h3><pre class=" language-shell"><code class="language-shell">ip a</code></pre><p>获取到主节点的ip，并在所有机器执行如下命令：</p><pre class=" language-shell"><code class="language-shell">#所有机器添加master域名映射，以下需要修改为自己的echo "192.168.118.128  cluster-endpoint" >> /etc/hosts</code></pre><p>开始初始化主节点，<strong>注意要替换主节点的ip（apiserver-advertise-address的值）</strong></p><pre class=" language-shell"><code class="language-shell">#主节点初始化kubeadm init \--apiserver-advertise-address=192.168.118.128 \--control-plane-endpoint=cluster-endpoint \--images-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \--kubernetes-version v1.20.9 \--service-cidr=10.96.0.0/16 \--pod-network-cidr=192.168.0.0/16</code></pre><p>等待执行完成，会看到输出如下内容，先复制出来：</p><pre class=" language-text"><code class="language-text">Your Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user:  mkdir -p $HOME/.kube  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  sudo chown $(id -u):$(id -g) $HOME/.kube/configAlternatively, if you are the root user, you can run:  export KUBECONFIG=/etc/kubernetes/admin.confYou should now deploy a pod network to the cluster.Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/You can now join any number of control-plane nodes by copying certificate authoritiesand service account keys on each node and then running the following as root:  kubeadm join cluster-endpoint:6443 --token wc5gu7.s7pz9hmegoaoijeo \    --discovery-token-ca-cert-hash sha256:dd3f285d72281abdb8403afee914fb56b954f205f313b9949e42e4a57b5c3cb3 \    --control-plane Then you can join any number of worker nodes by running the following on each as root:kubeadm join cluster-endpoint:6443 --token wc5gu7.s7pz9hmegoaoijeo \    --discovery-token-ca-cert-hash sha256:dd3f285d72281abdb8403afee914fb56b954f205f313b9949e42e4a57b5c3cb3</code></pre><pre class=" language-shell"><code class="language-shell">mkdir -p $HOME/.kube</code></pre><pre class=" language-shell"><code class="language-shell">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</code></pre><pre class=" language-shell"><code class="language-shell">sudo chown $(id -u):$(id -g) $HOME/.kube/config</code></pre><pre class=" language-shell"><code class="language-shell">#查看集群所有节点kubectl get nodes</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230504165734541.png"></p><h3 id="在master上安装calico"><a href="#在master上安装calico" class="headerlink" title="在master上安装calico"></a>在master上安装calico</h3><pre class=" language-shell"><code class="language-shell">vi calico.yaml</code></pre><p>我把配置文件存在oss上了，保存下来<br><a href="https://yoonada.oss-cn-shenzhen.aliyuncs.com/k8s/kubernetes/calico.yaml">https://yoonada.oss-cn-shenzhen.aliyuncs.com/k8s/kubernetes/calico.yaml</a></p><pre class=" language-shell"><code class="language-shell">kubectl apply -f calico.yaml</code></pre><h3 id="在work机器上（129、130）执行如下命令（上面复制那部分）："><a href="#在work机器上（129、130）执行如下命令（上面复制那部分）：" class="headerlink" title="在work机器上（129、130）执行如下命令（上面复制那部分）："></a>在work机器上（129、130）执行如下命令（上面复制那部分）：</h3><pre class=" language-shell"><code class="language-shell">kubeadm join cluster-endpoint:6443 --token wc5gu7.s7pz9hmegoaoijeo \    --discovery-token-ca-cert-hash sha256:dd3f285d72281abdb8403afee914fb56b954f205f313b9949e42e4a57b5c3cb3</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230504170721017.png"></p><h3 id="回到主节点（128）"><a href="#回到主节点（128）" class="headerlink" title="回到主节点（128）"></a>回到主节点（128）</h3><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230504170934242.png"></p><h3 id="安装kubernetes-dashboard"><a href="#安装kubernetes-dashboard" class="headerlink" title="安装kubernetes-dashboard"></a>安装kubernetes-dashboard</h3><p>从oss下载下来</p><p><a href="https://yoonada.oss-cn-shenzhen.aliyuncs.com/k8s/kubernetes/dashboard.yaml">https://yoonada.oss-cn-shenzhen.aliyuncs.com/k8s/kubernetes/dashboard.yaml</a></p><p>搜索 CentOS701，替换为自己的master的主机名</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230504171217679.png"></p><pre class=" language-shell"><code class="language-shell">kubectl apply -f dashboard.yaml</code></pre><pre class=" language-shell"><code class="language-shell">kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard</code></pre><pre class=" language-shell"><code class="language-shell">type: ClusterIP 改为 type: NodePort</code></pre><p>下载 dash.yaml<br><a href="https://yoonada.oss-cn-shenzhen.aliyuncs.com/k8s/kubernetes/dashboard.yaml">https://yoonada.oss-cn-shenzhen.aliyuncs.com/k8s/kubernetes/dashboard.yaml</a></p><pre class=" language-shell"><code class="language-shell">kubectl apply -f dash.yaml</code></pre><p>查看登录token</p><pre class=" language-shell"><code class="language-shell">kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/admin-user -o jsonpath="{.secrets[0].name}") -o go-template="{{.data.token | base64decode}}"</code></pre><p>查看端口</p><pre class=" language-shell"><code class="language-shell">kubectl get svc -A |grep kubernetes-dashboard</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230504171641769.png"></p><p>主节点+ip访问控制台</p><p><a href="https://192.168.118.128:30125/#/login">https://192.168.118.128:30125/#/login</a></p><p>密码为刚才生成的token</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230504171753281.png"></p>]]></content>
      
      
      <categories>
          
          <category> CentOS7 </category>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window安装mysql</title>
      <link href="/yoonada/yoonada.github.io/2023/03/30/window-an-zhuang-mysql/"/>
      <url>/yoonada/yoonada.github.io/2023/03/30/window-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>我已经将其存在oss上了</p><p><a href="https://yoondada.oss-cn-shenzhen.aliyuncs.com/software/window/mysql-5.7.41-winx64.zip">https://yoondada.oss-cn-shenzhen.aliyuncs.com/software/window/mysql-5.7.41-winx64.zip</a></p><h3 id="移动解压重命名"><a href="#移动解压重命名" class="headerlink" title="移动解压重命名"></a>移动解压重命名</h3><p>E:\software\dev\mysql-5.7.41</p><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><p>新建data文件夹、my.ini配置文件</p><h3 id="编辑my-imi-（路径是左斜杠，右斜杆会报错）"><a href="#编辑my-imi-（路径是左斜杠，右斜杆会报错）" class="headerlink" title="编辑my.imi （路径是左斜杠，右斜杆会报错）"></a>编辑my.imi （路径是左斜杠，右斜杆会报错）</h3><pre class=" language-shell"><code class="language-shell">[client]port=3306 [mysql]default-character-set=utf8                 [mysqld]basedir = "E:/software/dev/mysql-5.7.41"         #需要更改为自己的安装目录datadir = "E:/software/dev/mysql-5.7.41/data"     #需要更改为自己的安装目录加上/dataport = 3306                      max_connections=200                   character-set-server=utf8          default-storage-engine=INNODB</code></pre><h3 id="配置环境变量-系统变量"><a href="#配置环境变量-系统变量" class="headerlink" title="配置环境变量-系统变量"></a>配置环境变量-系统变量</h3><ul><li>新建 MYSQL_HOME，值为：E:\software\dev\mysql-5.7.41</li><li>系统变量中找到Path，在末尾追加：%MYSQL_HOME%\bin</li></ul><h3 id="以系统管理员打开cmd"><a href="#以系统管理员打开cmd" class="headerlink" title="以系统管理员打开cmd"></a>以系统管理员打开cmd</h3><p>记得是<strong>系统管理员</strong></p><pre class=" language-shell"><code class="language-shell">cd E:\software\dev\mysql-5.7.41\bin</code></pre><pre class=" language-shell"><code class="language-shell">mysqld --initialize-insecure</code></pre><pre class=" language-shell"><code class="language-shell">mysqld -install</code></pre><pre class=" language-shell"><code class="language-shell">net start mysql</code></pre><h3 id="设置连接密码"><a href="#设置连接密码" class="headerlink" title="设置连接密码"></a>设置连接密码</h3><pre class=" language-shell"><code class="language-shell">mysqladmin -u root password DD123456aa</code></pre><h3 id="搞定"><a href="#搞定" class="headerlink" title="搞定"></a>搞定</h3><pre class=" language-shell"><code class="language-shell">mysql -u root -p</code></pre>]]></content>
      
      
      <categories>
          
          <category> window </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> window </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop集群搭建</title>
      <link href="/yoonada/yoonada.github.io/2023/03/29/hadoop-ji-qun-da-jian/"/>
      <url>/yoonada/yoonada.github.io/2023/03/29/hadoop-ji-qun-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="必备"><a href="#必备" class="headerlink" title="必备"></a>必备</h2><ul><li>三台CentOS7服务器：<ul><li>192.168.253.130</li><li>192.168.253.131</li><li>192.168.253.132</li></ul></li><li>主机名修改对应为：<ul><li>CentOS7-130 (主)</li><li>CentOS7-131 </li><li>CentOS7-132</li></ul></li></ul><h2 id="安装（在130（主））"><a href="#安装（在130（主））" class="headerlink" title="安装（在130（主））"></a>安装（在130（主））</h2><h3 id="分别修改主机名"><a href="#分别修改主机名" class="headerlink" title="分别修改主机名"></a>分别修改主机名</h3><p>eg.192.168.253.130将主机名修改为130</p><pre class=" language-shell"><code class="language-shell">hostnamectl set-hostname CentOS7-130</code></pre><p>修改hosts文件</p><pre class=" language-shell"><code class="language-shell">vim /etc/hosts</code></pre><pre class=" language-shell"><code class="language-shell">192.168.253.130 CentOS7-130192.168.253.131 CentOS7-131192.168.253.132 CentOS7-132</code></pre><p>重启一下吧，重新加载</p><pre class=" language-shell"><code class="language-shell">reboot</code></pre><h3 id="设置ssh免密登录"><a href="#设置ssh免密登录" class="headerlink" title="设置ssh免密登录"></a>设置ssh免密登录</h3><p>看之前的文章<br><a href="https://blog.yoonada.cn/2022/09/20/ssh-mian-mi-deng-lu-san-tai-xu-ni-ji-zhi-jian-liang-liang-mian-mi-deng-lu/">https://blog.yoonada.cn/2022/09/20/ssh-mian-mi-deng-lu-san-tai-xu-ni-ji-zhi-jian-liang-liang-mian-mi-deng-lu/</a></p><h4 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h4><p>下载并上传至CentOS7的/usr/local/<br><a href="https://dlcdn.apache.org/hadoop/common/hadoop-3.3.5/hadoop-3.3.5.tar.gz">https://dlcdn.apache.org/hadoop/common/hadoop-3.3.5/hadoop-3.3.5.tar.gz</a></p><p>解压</p><pre class=" language-shell"><code class="language-shell">tar -zxvf hadoop-3.3.5.tar.gz</code></pre><pre class=" language-shell"><code class="language-shell">vim /etc/profile</code></pre><pre class=" language-shell"><code class="language-shell"># HADOOP_HOMEexport HADOOP_HOME=/usr/local/hadoop-3.3.5export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATHexport HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib:$HADOOP_HOME/lib/native"</code></pre><pre class=" language-shell"><code class="language-shell">source /etc/profile</code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><h4 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h4><pre class=" language-shell"><code class="language-shell">cd /usr/local/hadoop-3.3.5/etc/hadoop</code></pre><pre class=" language-shell"><code class="language-shell">vim hadoop-env.sh</code></pre><p>配置你本机的JAVA_HOME，可通过 echo $JAVA_HOME 查询</p><pre class=" language-shell"><code class="language-shell">export JAVA_HOME=/usr/local/jdk</code></pre><p><strong>root用户需多添加</strong></p><pre class=" language-shell"><code class="language-shell">export HDFS_NAMENODE_USER=rootexport HDFS_DATANODE_USER=rootexport HDFS_SECONDARYNAMENODE_USER=rootexport YARN_RESOURCEMANAGER_USER=rootexport YARN_NODEMANAGER_USER=root</code></pre><h4 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h4><pre class=" language-shell"><code class="language-shell">vim core-site.xml</code></pre><pre class=" language-yaml"><code class="language-yaml">&lt;configuration<span class="token punctuation">></span>    &lt;property<span class="token punctuation">></span>        &lt;name<span class="token punctuation">></span>fs.defaultFS&lt;/name<span class="token punctuation">></span>        &lt;value<span class="token punctuation">></span>hdfs<span class="token punctuation">:</span>//CentOS7<span class="token punctuation">-</span>130<span class="token punctuation">:</span>8020&lt;/value<span class="token punctuation">></span>    &lt;/property<span class="token punctuation">></span>    &lt;property<span class="token punctuation">></span>        &lt;name<span class="token punctuation">></span>hadoop.tmp.dir&lt;/name<span class="token punctuation">></span>        &lt;value<span class="token punctuation">></span>/usr/local/hadoop<span class="token punctuation">-</span>3.3.5/dfs/tmp&lt;/value<span class="token punctuation">></span>    &lt;/property<span class="token punctuation">></span>    &lt;property<span class="token punctuation">></span>        &lt;name<span class="token punctuation">></span>hadoop.http.staticuser.user&lt;/name<span class="token punctuation">></span>        &lt;value<span class="token punctuation">></span>root&lt;/value<span class="token punctuation">></span>    &lt;/property<span class="token punctuation">></span>&lt;/configuration<span class="token punctuation">></span></code></pre><h4 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h4><pre class=" language-shell"><code class="language-shell">vim hdfs-site.xml</code></pre><pre class=" language-yaml"><code class="language-yaml">&lt;configuration<span class="token punctuation">></span>  &lt;property<span class="token punctuation">></span>    &lt;name<span class="token punctuation">></span>dfs.namenode.http<span class="token punctuation">-</span>address&lt;/name<span class="token punctuation">></span>    &lt;value<span class="token punctuation">></span>CentOS7<span class="token punctuation">-</span>130<span class="token punctuation">:</span>9870&lt;/value<span class="token punctuation">></span>  &lt;/property<span class="token punctuation">></span>  &lt;property<span class="token punctuation">></span>    &lt;name<span class="token punctuation">></span>dfs.namenode.secondary.http<span class="token punctuation">-</span>address&lt;/name<span class="token punctuation">></span>    &lt;value<span class="token punctuation">></span>CentOS7<span class="token punctuation">-</span>132<span class="token punctuation">:</span>9868&lt;/value<span class="token punctuation">></span>  &lt;/property<span class="token punctuation">></span>&lt;/configuration<span class="token punctuation">></span></code></pre><h4 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h4><pre class=" language-shell"><code class="language-shell">vim yarn-site.xml</code></pre><pre class=" language-yaml"><code class="language-yaml">&lt;configuration<span class="token punctuation">></span>  &lt;<span class="token tag">!--</span> 指定MR走shuffle <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">  &lt;property>    &lt;name>yarn.nodemanager.aux-services&lt;/name>    &lt;value>mapreduce_shuffle&lt;/value>  &lt;/property>  &lt;!-- 指定ResourceManager的地址-->  &lt;property>    &lt;name>yarn.resourcemanager.hostname&lt;/name>    &lt;value>CentOS7-131&lt;/value>  &lt;/property>  &lt;!-- 环境变量的继承 -->  &lt;property>    &lt;name>yarn.nodemanager.env-whitelist&lt;/name>     &lt;value>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME&lt;/value>  &lt;/property></span>&lt;/configuration<span class="token punctuation">></span></code></pre><h4 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h4><pre class=" language-shell"><code class="language-shell">vim mapred-site.xml</code></pre><pre class=" language-yaml"><code class="language-yaml">&lt;configuration<span class="token punctuation">></span>  &lt;<span class="token tag">!--</span> 指定MapReduce程序运行在Yarn上 <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">></span><span class="token scalar string">  &lt;property>    &lt;name>mapreduce.framework.name&lt;/name>    &lt;value>yarn&lt;/value>  &lt;/property></span>&lt;/configuration<span class="token punctuation">></span></code></pre><pre class=" language-shell"><code class="language-shell">vim /usr/local/hadoop-3.3.5/etc/hadoop/workers</code></pre><pre class=" language-shell"><code class="language-shell">CentOS7-130CentOS7-131CentOS7-132</code></pre><h2 id="迁移（131、132）"><a href="#迁移（131、132）" class="headerlink" title="迁移（131、132）"></a>迁移（131、132）</h2><h3 id="安装rsync"><a href="#安装rsync" class="headerlink" title="安装rsync"></a>安装rsync</h3><pre class=" language-shell"><code class="language-shell">yum install rsync -y </code></pre><h3 id="自定义xsync"><a href="#自定义xsync" class="headerlink" title="自定义xsync"></a>自定义xsync</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local/bin/</code></pre><pre class=" language-shell"><code class="language-shell">vim xsync</code></pre><pre class=" language-shell"><code class="language-shell">#!/bin/bash#1. 判断参数个数if [ $# -lt 1 ]then    echo Not Enough Arguement!    exit;fi#2. 遍历集群所有机器for host in CentOS7-130 CentOS7-131 CentOS7-132do    echo ====================  $host  ====================    #3. 遍历所有目录，挨个发送    for file in $@    do        #4. 判断文件是否存在        if [ -e $file ]            then                #5. 获取父目录                pdir=$(cd -P $(dirname $file); pwd)                #6. 获取当前文件的名称                fname=$(basename $file)                ssh $host "mkdir -p $pdir"                rsync -av $pdir/$fname $host:$pdir            else                echo $file does not exists!        fi    donedone</code></pre><pre class=" language-shell"><code class="language-shell">chmod +x xsync</code></pre><h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><pre class=" language-shell"><code class="language-shell">xsync xsync</code></pre><pre class=" language-shell"><code class="language-shell">xsync /usr/local/hadoop-3.3.5/</code></pre><pre class=" language-shell"><code class="language-shell">xsync /etc/profile</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="集群架构图"><a href="#集群架构图" class="headerlink" title="集群架构图"></a>集群架构图</h3><table><thead><tr><th></th><th>CentOS7-130</th><th>CentOS7-131</th><th>CentOS7-132</th></tr></thead><tbody><tr><td>HDFS</td><td><strong>NameNode</strong>、DataNode</td><td>DataNode</td><td><strong>SecondaryNameNode</strong>、DataNode</td></tr><tr><td>YARN</td><td>NodeManager</td><td><strong>ResourcesManager</strong>、NodeManager</td><td>NodeManager</td></tr></tbody></table><h3 id="130（主）"><a href="#130（主）" class="headerlink" title="130（主）"></a>130（主）</h3><p><strong>如果是集群第一次启动，需要再主节点（130）格式化NameNode，此时为130</strong></p><pre class=" language-shell"><code class="language-shell">hdfs namenode -format</code></pre><p>启动HDFS</p><pre class=" language-shell"><code class="language-shell">cd /usr/local/hadoop-3.3.5/</code></pre><pre class=" language-shell"><code class="language-shell">sbin/start-dfs.sh</code></pre><pre class=" language-shell"><code class="language-shell">jps</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230329165730029.png"></p><p>页面访问</p><p><a href="http://192.168.253.130:9870/">http://192.168.253.130:9870/</a></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230329170029638.png"></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230329170041264.png"><br>此时，<strong>HDFS的部署成功</strong><br><strong>131的启动情况：</strong></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230329170440215.png"></p><p><strong>132的启动情况：</strong></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230329170547930.png"></p><h3 id="131（配置了ResourceManager的节点）"><a href="#131（配置了ResourceManager的节点）" class="headerlink" title="131（配置了ResourceManager的节点）"></a>131（配置了ResourceManager的节点）</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local/hadoop-3.3.5/</code></pre><pre class=" language-shell"><code class="language-shell">sbin/start-yarn.sh</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230329170839288.png"></p><p>输入网址</p><p><a href="http://192.168.253.131:8088/">http://192.168.253.131:8088/</a></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230329171046395.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
          <category> CentOS7 </category>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis集群搭建</title>
      <link href="/yoonada/yoonada.github.io/2023/03/24/redis-ji-qun-da-jian/"/>
      <url>/yoonada/yoonada.github.io/2023/03/24/redis-ji-qun-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis集群搭建"><a href="#Redis集群搭建" class="headerlink" title="Redis集群搭建"></a>Redis集群搭建</h2><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://cloud.tencent.com/developer/article/2124382?areaSource=&amp;traceId=">https://cloud.tencent.com/developer/article/2124382?areaSource=&amp;traceId=</a></p><h3 id="基础环境安装"><a href="#基础环境安装" class="headerlink" title="基础环境安装"></a>基础环境安装</h3><ul><li>CentOS7服务器三台<ul><li>192.168.253.130</li><li>192.168.253.131</li><li>192.168.253.132</li></ul></li><li>三台CentOS7服务器都安装redis-5.0.14</li></ul><h4 id="基本安装（三台CentOS7都安装）"><a href="#基本安装（三台CentOS7都安装）" class="headerlink" title="基本安装（三台CentOS7都安装）"></a>基本安装（三台CentOS7都安装）</h4><pre class=" language-shell"><code class="language-shell">yum install gcc</code></pre><pre class=" language-shell"><code class="language-shell">cd /usr/local/</code></pre><pre class=" language-shell"><code class="language-shell">wget https://download.redis.io/releases/redis-5.0.14.tar.gz</code></pre><pre class=" language-shell"><code class="language-shell">tar -zxvf redis-5.0.14.tar.gz</code></pre><pre class=" language-shell"><code class="language-shell">cd redis-5.0.14</code></pre><pre class=" language-shell"><code class="language-shell">mkdir bin</code></pre><pre class=" language-shell"><code class="language-shell">make</code></pre><pre class=" language-shell"><code class="language-shell">cd src/</code></pre><pre class=" language-shell"><code class="language-shell">make install</code></pre><pre class=" language-shell"><code class="language-shell">cp mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-rdb redis-cli redis-server redis-sentinel /usr/local/redis-5.0.14/bin/</code></pre><pre class=" language-shell"><code class="language-shell">cd /usr/local/redis-5.0.14/bin</code></pre><pre class=" language-shell"><code class="language-shell">./redis-server ../redis.conf</code></pre><h3 id="Redis的主从配置"><a href="#Redis的主从配置" class="headerlink" title="Redis的主从配置"></a>Redis的主从配置</h3><p>下面给对应的CentOS7服务器进行配置，其中130为主机，131、132为从机</p><table><thead><tr><th align="center">ip地址</th><th align="center">端口号</th><th align="center">角色</th></tr></thead><tbody><tr><td align="center">192.168.253.130</td><td align="center">6379</td><td align="center">主机（master）</td></tr><tr><td align="center">192.168.253.131</td><td align="center">6380</td><td align="center">从机（slave）</td></tr><tr><td align="center">192.168.253.132</td><td align="center">6381</td><td align="center">从机（slave）</td></tr></tbody></table><h4 id="192-168-253-130的redis-conf修改"><a href="#192-168-253-130的redis-conf修改" class="headerlink" title="192.168.253.130的redis.conf修改"></a>192.168.253.130的redis.conf修改</h4><pre class=" language-shell"><code class="language-shell">bind：0.0.0.0port：6379protected-mode：nodaemonize：yeslogfile：redis.logrequirepass：DD123456aamasterauth：DD123456aa</code></pre><h4 id="192-168-253-131的redis-conf修改"><a href="#192-168-253-131的redis-conf修改" class="headerlink" title="192.168.253.131的redis.conf修改"></a>192.168.253.131的redis.conf修改</h4><pre class=" language-shell"><code class="language-shell">bind：0.0.0.0port：6380protected-mode：nodaemonize：yeslogfile：./redis.logrequirepass：DD123456aamasterauth：DD123456aareplicaof 192.168.253.130 6379 </code></pre><h4 id="192-168-253-132的redis-conf修改"><a href="#192-168-253-132的redis-conf修改" class="headerlink" title="192.168.253.132的redis.conf修改"></a>192.168.253.132的redis.conf修改</h4><pre class=" language-shell"><code class="language-shell">bind：0.0.0.0port：6381protected-mode：nodaemonize：yeslogfile：./redis.logrequirepass：DD123456aamasterauth：DD123456aareplicaof 192.168.253.130 6379 </code></pre><h3 id="Redis的哨兵模式"><a href="#Redis的哨兵模式" class="headerlink" title="Redis的哨兵模式"></a>Redis的哨兵模式</h3><h4 id="搭建（三台CentOS7对应的redis都进行如下操作）"><a href="#搭建（三台CentOS7对应的redis都进行如下操作）" class="headerlink" title="搭建（三台CentOS7对应的redis都进行如下操作）"></a>搭建（三台CentOS7对应的redis都进行如下操作）</h4><pre class=" language-shell"><code class="language-shell">cd /usr/local/redis-5.0.14</code></pre><pre class=" language-shell"><code class="language-shell">cp sentinel.conf sentinel.conf.bak</code></pre><pre class=" language-shell"><code class="language-shell">vim sentinel.conf</code></pre><p>修改如下：</p><pre class=" language-shell"><code class="language-shell">//端口默认为26379。port:26379//关闭保护模式，可以外部访问。protected-mode:no//设置为后台启动。daemonize:yes//日志文件。logfile:sentinel.log//指定主机IP地址和端口，并且指定当有2台哨兵认为主机挂了，则对主机进行容灾切换。sentinel monitor mymaster 192.168.253.130 6379 2//当在Redis实例中开启了requirepass，这里就需要提供密码。sentinel auth-pass mymaster DD123456aa//这里设置了主机多少秒无响应，则认为挂了。sentinel down-after-milliseconds mymaster 3000//主备切换时，最多有多少个slave同时对新的master进行同步，这里设置为默认的1。sentinel parallel-syncs mymaster 1//故障转移的超时时间，这里设置为三分钟。sentinel failover-timeout mymaster 180000</code></pre><pre class=" language-shell"><code class="language-shell">cd /usr/local/redis-5.0.14/bin</code></pre><pre class=" language-shell"><code class="language-shell">./redis-sentinel ../sentinel.conf</code></pre><pre class=" language-shell"><code class="language-shell">ps -axu|grep redis</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230324152509371.png"></p><pre class=" language-shell"><code class="language-shell">redis-cli -p 26379</code></pre><pre class=" language-shell"><code class="language-shell">info sentinel</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230324153115011.png"></p><h4 id="容灾切换"><a href="#容灾切换" class="headerlink" title="容灾切换"></a>容灾切换</h4><p>现在我们模拟主机宕机，将主机 redis 服务关闭，如下</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230324153813734.png"></p><p>去原本的从机131、132看。会发现主机变为132了</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230324154028853.png"></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230324154357699.png"></p><h3 id="Redis集群模式"><a href="#Redis集群模式" class="headerlink" title="Redis集群模式"></a>Redis集群模式</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local/redis-5.0.14</code></pre><pre class=" language-shell"><code class="language-shell">mkdir cluster</code></pre><pre class=" language-shell"><code class="language-shell">cd cluster</code></pre><pre class=" language-shell"><code class="language-shell">mkdir 7000 7001 7002 7003 7004 7005</code></pre><pre class=" language-shell"><code class="language-shell">cp /usr/local/redis-5.0.14/redis.conf.bak /usr/local/redis-5.0.14/cluster/7000/redis.conf</code></pre><p>每个文件夹里，要<strong>对应一个redis.conf</strong>（稍做修改）</p><pre class=" language-shell"><code class="language-shell"># 端口号bind  注释掉port 7000# 开启集群模式cluster-enabled yes# 设置保存节点配置文件的路径，默认值为 nodes-6379.conf。根据端口号更换cluster-config-file  nodes-7000.conf# 设置节点超时时间cluster-node-timeout 5000# 设置是否开启 aof 模式，对数据库完整性要求比较高可以开启appendonly no# 设置为后端启动daemonize yesprotected-mode no</code></pre><pre class=" language-shell"><code class="language-shell">cp /usr/local/redis-5.0.14/src/redis-server /usr/local/redis-5.0.14/cluster/</code></pre><pre class=" language-shell"><code class="language-shell">cp /usr/local/redis-5.0.14/src/redis-cli /usr/local/redis-5.0.14/cluster/</code></pre><pre class=" language-shell"><code class="language-shell">vim start-all.sh</code></pre><pre class=" language-shell"><code class="language-shell">cd 7000../redis-server ./redis.confcd ..cd 7001../redis-server ./redis.confcd ..cd 7002../redis-server ./redis.confcd ..cd 7003../redis-server ./redis.confcd ..cd 7004../redis-server ./redis.confcd ..cd 7005../redis-server ./redis.confcd ..</code></pre><p>此时，拥有这些</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230327164305671.png"></p><p>执行脚本，启动这六个redis</p><pre class=" language-shell"><code class="language-shell">sh start-all.sh</code></pre><pre class=" language-shell"><code class="language-shell">ps -aux | grep redis</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230327164343172.png"></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/image-20230327164422033.png"></p><p>启动集群</p><pre class=" language-shell"><code class="language-shell">/usr/local/redis-5.0.14/cluster/redis-cli --cluster create 192.168.253.130:7000 192.168.253.130:7001 192.168.253.130:7002 192.168.253.130:7003 192.168.253.130:7004 192.168.253.130:7005 --cluster-replicas 1</code></pre>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
          <category> CentOS7 </category>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> 集群 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记总结</title>
      <link href="/yoonada/yoonada.github.io/2023/02/01/mysql-xue-xi-bi-ji-zong-jie/"/>
      <url>/yoonada/yoonada.github.io/2023/02/01/mysql-xue-xi-bi-ji-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL的存储引擎"><a href="#MySQL的存储引擎" class="headerlink" title="MySQL的存储引擎"></a>MySQL的存储引擎</h3><p>比较常用的：MyISAM、InnoDB</p><ul><li>MyISAM：拥有较高的插入查询速度，但不支持事务，使用表级锁，并发性差，灾难恢复性不佳。MySQL 5.5.5 之前，MyISAM 是 MySQL 的默认存储引擎。</li><li>InnoDB：支持ACID事务，支持行级锁和表级锁，默认使用行级锁，支持外键关联，支持热备份，灾难恢复性好。5.5.5 版本之后，InnoDB 是 MySQL 的默认存储引擎。</li></ul><h4 id="MyISAM和InnoDB该如何选择"><a href="#MyISAM和InnoDB该如何选择" class="headerlink" title="MyISAM和InnoDB该如何选择"></a>MyISAM和InnoDB该如何选择</h4><ul><li>InnoDB支持事务、外键、MVCC而MyISAM都不支持</li><li>MyISAM适合频繁查询的应用，适合小数据，小并发而InnoDB适合插入和更新操作比较多的应用，大数据、高并发。</li></ul><h3 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h3><h4 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a>索引是什么</h4><p><strong>索引是一种用于快速查询和检索数据的数据结构，其本质可以看成一种排序好的数据结构</strong></p><h5 id="索引底层数据结构"><a href="#索引底层数据结构" class="headerlink" title="索引底层数据结构"></a>索引底层数据结构</h5><ul><li>B树</li><li>B+树</li><li>Hash、红黑树</li></ul><p>在MySQL中，无论是InnoDB还是MyISAM，都使用了B+树作为索引结构</p><h4 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>大大加快了数据的检索速度</li><li>通过创建唯一性索引，可以保证数据库表中数据的唯一性</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>创建维护索引需要耗费很多时间。当对表中数据进行增删改的时候，如果数据有索引，那么索引也需要动态修改，会降低SQL执行效率</li><li>索引需要使用物理文件存储，也会耗费一定空间</li></ul><h4 id="使用索引一定能提高查询性能吗"><a href="#使用索引一定能提高查询性能吗" class="headerlink" title="使用索引一定能提高查询性能吗"></a>使用索引一定能提高查询性能吗</h4><p>大多数情况下，索引查询都是比全表查询要快的，但如果数据库的数据量不大，那么使用索引也不一定能够带来很大提升</p><h4 id="索引的底层数据结构"><a href="#索引的底层数据结构" class="headerlink" title="索引的底层数据结构"></a>索引的底层数据结构</h4><h5 id="Hash表"><a href="#Hash表" class="headerlink" title="Hash表"></a>Hash表</h5><p>哈希表是键值对的集合，通过键（key）即可快速取出对应的值（value），因此哈希表可以快速检索数据</p><p><strong>为何能够通过key快速取出value呢？</strong> 原因在于哈希算法（也叫散列算法）。通过哈希算法，我们可以快速找到key对应的index，找到了index也就找到了对应的value。 但是！哈希算法有个<strong>Hash冲突</strong>的问题。</p><p><strong>何为哈希冲突？</strong> 也就是说多个不同的key最后得到的index是相同的。</p><p>通常情况下，我们常用的解决办法是<strong>链地址法</strong>。<strong>链地址法就是将哈希冲突的数据存放在链表中</strong>。<br>就比如JDK1.8之前 HashMap 就是通过链地址法来解决哈希冲突的。不过，JDK1.8以后，HashMap为了减少链表过长的时候搜索时间过长，就引入了红黑树。</p><p>既然哈希表这么快，<strong>为什么 MySQL 没有使用其作为索引的数据结构呢？ 主要是因为Hash索引不支持顺序和范围查询。</strong> 假如我们要对表中的数据进行排序或者进行范围查询，那 Hash 索引可就不行了。并且，每次 IO 只能取一个。<br>试想一种情况:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tb1 <span class="token keyword">WHERE</span> id <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span></code></pre><p>在这种范围查询中，优势非常大，直接遍历比 500 小的叶子节点就够了。而 Hash 索引是根据 hash 算法来定位的，难不成还要把 1 - 499 的数据，每个都进行一次 hash 计算来定位吗?这就是 Hash 最大的缺点了。</p><h5 id="B树-amp-B-树"><a href="#B树-amp-B-树" class="headerlink" title="B树&amp;B+树"></a>B树&amp;B+树</h5><p>B树也称为B-树，全称为<strong>多路平衡查找树</strong>，B+树是B树的一种变体。B树和B+树中的B是Balance（平衡）的意思。目前大部分数据库系统及文件系统都采用 B-Tree 或其变种 B+Tree 作为索引结构。</p><p><strong>B树&amp;B+树两者有何异同</strong></p><ul><li>B树的所有节点既存放键（key）也存放数据（data），而B+树只有叶子节点存放key和data，其他节点只存放key</li><li>B树的叶子节点都是独立的；B+树的叶子节点有一条引用链指向与它相邻的叶子节点</li><li>B树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</li></ul><p><strong>为啥使用B+树而不使用B树</strong></p><ul><li>B树只适合随机检索，而B+树同时支持随机检索和顺序检索</li><li>B+树的空间利用率更高，更稳定，范围查询性能更优</li></ul><h4 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h4><p>索引类型分为两大类：主键索引、二级索引<br>细分的话，分为：</p><ul><li>主键索引</li><li>唯一索引</li><li>普通索引</li><li>空间索引</li><li>全文索引</li></ul><h5 id="主键索引（Primary-Key）"><a href="#主键索引（Primary-Key）" class="headerlink" title="主键索引（Primary Key）"></a>主键索引（Primary Key）</h5><p>数据表的主键列使用的就是主键索引，一个数据表只能有一个主键，并且主键不能为null，不能重复。</p><p>在MySQL的InnoDB的表中，当没有显示指定表的主键时，InnoDB会自动先检查表中是否有唯一索引且不允许存在null值的字段，如果有，则选择改字段为默认的主键，否则InnoDB会自动创建一个6Byte的自增主键。</p><h5 id="二级索引（辅助索引）"><a href="#二级索引（辅助索引）" class="headerlink" title="二级索引（辅助索引）"></a>二级索引（辅助索引）</h5><p><strong>二级索引又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。</strong></p><ul><li>唯一索引（Unique Key）</li><li>普通索引（Index）</li><li>前缀索引（Prefix）</li><li>全文索引（Full Text）</li></ul><h6 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h6><p>唯一索引也是一种约束，唯一索引的属性列不能出现重复的数据，但是允许数据为null，一张表允许创建多个唯一索引。</p><h6 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h6><p>普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和null。</p><h6 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h6><p>前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。</p><h6 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h6><p>全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6之前只有MYISAM引擎支持全文索引，5.6之后InnoDB也支持了全文索引。</p><h4 id="聚簇索引与非聚簇索引"><a href="#聚簇索引与非聚簇索引" class="headerlink" title="聚簇索引与非聚簇索引"></a>聚簇索引与非聚簇索引</h4><h5 id="聚簇索引（聚集索引）"><a href="#聚簇索引（聚集索引）" class="headerlink" title="聚簇索引（聚集索引）"></a>聚簇索引（聚集索引）</h5><p><strong>聚簇索引即索引结构和数据一起存放的索引，并不是一种单独的索引类型。InnoDB中的主键索引就属于聚簇索引。</strong></p><h5 id="聚簇索引的优缺点"><a href="#聚簇索引的优缺点" class="headerlink" title="聚簇索引的优缺点"></a>聚簇索引的优缺点</h5><h6 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h6><ul><li><strong>查询速度非常快</strong>：因为整个B+树本身就是一颗多叉平衡树，叶子节点也是有序的，定位到索引的节点，就相当于定位到了数据。相对于非聚簇索引，聚簇索引少了一次读取数据的IO操作</li><li><strong>对排序查询和范围查找优化</strong>：聚簇索引对于主键的排序查找和范围查找速度非常快</li></ul><h6 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h6><ul><li><strong>依赖于有序的数据</strong></li><li><strong>更新代价大</strong></li></ul><h5 id="非聚簇索引（非聚集索引）"><a href="#非聚簇索引（非聚集索引）" class="headerlink" title="非聚簇索引（非聚集索引）"></a>非聚簇索引（非聚集索引）</h5><p><strong>非聚簇索引即索引结构和数据分开存放的索引，并不是一种单独的索引类型。二级索引（辅助索引）就属于非聚簇索引。MySQL的MyISAM引擎，不管主键还是非主键，使用的都是非聚簇索引</strong><br>非聚簇索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。</p><h5 id="非聚簇索引的优缺点"><a href="#非聚簇索引的优缺点" class="headerlink" title="非聚簇索引的优缺点"></a>非聚簇索引的优缺点</h5><h6 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h6><p>更新代价比聚簇索引要小，因为其叶子节点不存放数据</p><h6 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h6><ul><li><strong>依赖于有序的数据：</strong> 跟聚簇索引一样，非聚簇索引也依赖于有序的数据</li><li>可能会二次查询（回表）：这个应该是非聚簇索引最大的缺点了，当查到索引对于的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询</li></ul><h4 id="覆盖索引和联合索引"><a href="#覆盖索引和联合索引" class="headerlink" title="覆盖索引和联合索引"></a>覆盖索引和联合索引</h4><h5 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h5><p>如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为“覆盖索引”。我们知道在InnoDB存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要回表，也就是通过主键再查找一次，<br>这样会比较慢。覆盖索引就是把要查询出的列和索引是对应的，不做回表操作。</p><p><strong>覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询</strong><br>如主键索引，如果一条 SQL 需要查询主键，那么正好根据主键索引就可以查到主键。</p><p>再如普通索引，如果一条 SQL 需要查询 name，name 字段正好有索引， 那么直接根据这个索引就可以查到数据，也无需回表。</p><h5 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h5><p>使用表中的多个字段创建索引，就是<strong>联合索引</strong>，也叫<strong>组合索引</strong>或<strong>复合索引</strong></p><h4 id="最左前缀匹配原则"><a href="#最左前缀匹配原则" class="headerlink" title="最左前缀匹配原则"></a>最左前缀匹配原则</h4><p>指在使用联合索引时，MySQL会根据联合索引中的字段顺序，从左到右依次到查询条件中去匹配，如果查询条件中存在与联合索引中最左侧字段相匹配的字段，则就会使用该字段过滤一批数据，直至联合索引中全部字段匹配完成，或者在执行过程中遇到范围查询，如 &gt;、&lt;、between 和 以%开头的like查询 等条件，才会停止匹配。</p><h4 id="索引失效的情况"><a href="#索引失效的情况" class="headerlink" title="索引失效的情况"></a>索引失效的情况</h4><ul><li>使用select * 进行查询</li><li>创建了组合索引但查询条件未遵守最左匹配原则</li><li>在索引列上进行计算、函数、类型转换等操作</li><li>以%开头的like查询，比如 like ‘%abc%’</li><li>查询条件中使用or，并且or的前后条件有一个列没有索引，涉及的索引都不会被使用到</li><li>对于大数据量的查询，数据库可能选择放弃索引而进行全表扫描，以避免频繁的索引访问</li></ul><h4 id="什么是事务-amp-事务基本特性是啥"><a href="#什么是事务-amp-事务基本特性是啥" class="headerlink" title="什么是事务&amp;事务基本特性是啥"></a>什么是事务&amp;事务基本特性是啥</h4><p>事务指的是满足ACID特性的一组操作，可以通过Commit提交一个事务，也可以使用Rollback进行回滚</p><h5 id="事务基本特性ACID？"><a href="#事务基本特性ACID？" class="headerlink" title="事务基本特性ACID？"></a>事务基本特性ACID？</h5><ul><li>A（atomicity）原子性：事务是一个不可分割的整体，事务的所有操作要么全部成功，要么全部回滚；</li><li>C（consistency）一致性：指的是数据库总是从一个一致性的状态转换到另外一个一致性的状态。比如：A转账给B，100块钱，假如中间sql执行过程中系统崩溃A也不会损失100块，因为事务没有提交，修改就不会被保存到数据库</li><li>I（isolation）隔离性：指的是一个事务的修改在最终提交前，对其他事务是不可见的</li><li>D（durability）持久性：指的是一旦事务提交，所做的修改就会永久保存到数据库中</li></ul><h5 id="脏读-amp-amp-不可重复读-amp-amp-幻读（虚读）"><a href="#脏读-amp-amp-不可重复读-amp-amp-幻读（虚读）" class="headerlink" title="脏读&amp;&amp;不可重复读&amp;&amp;幻读（虚读）"></a>脏读&amp;&amp;不可重复读&amp;&amp;幻读（虚读）</h5><h6 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h6><p>脏读：事务A读取到事务B未提交的数据，然后事务B回滚，那么事务A读取到的数据就是脏数据</p><p>比如我给你转100万，但我还没提交，这时你查询自己账户多了100万，然后我发现转错人了，回滚了事务，然后你100万没了，在这个过程中，你查询到我未提交的事务数据（100万）就是脏读</p><h6 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h6><p>不可重复读：事务A进行多次读取操作，事务B在事务A多次读取的过程中，执行更新操作并提交，导致事务A读取到的数据先后不一致。</p><p>T2 读取一个数据，T1 对该数据做了<strong>修改</strong>。如果 T2 再次读取这个数据，此时读取的结果和第一次读取的结果不同。</p><h6 id="幻读（虚读）"><a href="#幻读（虚读）" class="headerlink" title="幻读（虚读）"></a>幻读（虚读）</h6><p>事务A首先根据条件得到N条数据，事务B增添了M条符合事务A搜索条件的数据，导致事务A再次搜素发现有N+M条数据，就产生了幻读。</p><p>T1 读取某个范围的数据，T2 在这个范围内<strong>插入</strong>新的数据，T1 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。</p><h6 id="不可重复读和幻读有什么区别"><a href="#不可重复读和幻读有什么区别" class="headerlink" title="不可重复读和幻读有什么区别"></a>不可重复读和幻读有什么区别</h6><ul><li>不可重复读的重点是内容修改或记录减少</li><li>幻读的重点在于新增</li></ul><h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><ul><li>读未提交（READ-UNCOMMITTED）：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读</li><li>读已提交（READ-COMMITTED）：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生</li><li>可重复读（REPEATABLE-READ）：对同一字段的多次读取结果是一致的，除非数据被自身事务所修改，可以阻止脏读和不可重复读</li><li>可串行化（SERIALIZABLE）:最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读</li></ul><h4 id="MySQL锁"><a href="#MySQL锁" class="headerlink" title="MySQL锁"></a>MySQL锁</h4><h5 id="表级锁和行级锁"><a href="#表级锁和行级锁" class="headerlink" title="表级锁和行级锁"></a>表级锁和行级锁</h5><ul><li>表级锁：粒度大，针对非索引字段加的锁，资源消耗少，加锁快，不会出现死锁，但高并发下效率极低。</li><li>行级锁：粒度小，针对索引字段加的锁，只针对当前操作的行记录加锁，并发性高，但开销也大，会出现死锁。</li></ul><h4 id="MySQL的日志"><a href="#MySQL的日志" class="headerlink" title="MySQL的日志"></a>MySQL的日志</h4><ul><li>错误日志（error log）：对MySQL的启动、运行、关闭过程进行记录。</li><li>二进制日志（binary log，binlog）：主要记录的是<strong>更改数据库数据</strong>的SQL语句。</li><li>一般查询日志（general query log）：已建立连接的客户端发送给MySQL服务器的所有SQL记录，因为SQL的量比较大，默认是不开启的，也不建议开启。</li><li>慢查询日志（slow query log）：执行时间超过 long_query_time秒钟的查询，解决SQL慢查询问题的时候会用到。</li><li>事务日志（redo log 和 undo log）：redo log是重做日志；undo log是回滚日志。</li><li>中继日志（relay log）：relay log是复制过程中产生的日志，很多方面都跟binary log差不多。不过，relay log针对的是主从复制的从库。</li><li>DDL日志（metadata log）：DDL语句执行的元数据操作。</li></ul><h4 id="binlog（二进制日志）"><a href="#binlog（二进制日志）" class="headerlink" title="binlog（二进制日志）"></a>binlog（二进制日志）</h4><h5 id="binlog是什么"><a href="#binlog是什么" class="headerlink" title="binlog是什么"></a>binlog是什么</h5><p>binlog（binary log即二进制日志文件）：<strong>主要记录了对MySQL数据库执行了更改的所有操作</strong>（数据库执行的所有DDL和DML语句），包括表结构变更（CREATE、ALTER、DROP TABLE…）、表数据修改（INSERT、UPDATE、DELETE…），<strong>但不包括SELECT、SHOW这类不会对数据库更改的操作</strong>。</p><p>即使表结构变更和表数据修改操作并未对数据库造成更改，依然会被记录进binlog。</p><h5 id="binlog的格式有哪几种"><a href="#binlog的格式有哪几种" class="headerlink" title="binlog的格式有哪几种"></a>binlog的格式有哪几种</h5><ul><li>statement模式：每一条会修改数据的sql都会被记录在binlog中，如inserts、updates，deletes</li><li>row模式：</li></ul><h5 id="binlog和redo-log的区别"><a href="#binlog和redo-log的区别" class="headerlink" title="binlog和redo log的区别"></a>binlog和redo log的区别</h5><ul><li>binlog主要用于数据库还原，属于数据级别的数据恢复，主从复制是binlog最常用的一个应用场景。redo log主要用于保证事务的持久性，属于事务级别的数据恢复。</li><li>redo log属于InnoDB引擎特有的，binlog属于所有存储引擎共有的，因为binlog是MySQL的Server层实现的。</li><li>redo log属于物理日志，主要记录的事某个页的修改。binlog属于逻辑日志，主要记录的是数据库执行的所有DDL和DML语句。</li></ul><h4 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h4><p>MVCC（Multi-Version Concurrency Control）是一种数据库事务并发控制机制，用于实现多个事务的并发执行而不产生冲突。MVCC通过维护数据的多个版本，为每个事务创建一个可见性视图，从而实现事务的隔离性和高并发性</p><h4 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h4><ul><li>第一范式：每个列都不可以再拆分。</li><li>第二范式：非主键列完全依赖于主键。</li><li>第三范式：非主键列只依赖于主键，不依赖于其他非主键。</li></ul><h4 id="DDL和DML"><a href="#DDL和DML" class="headerlink" title="DDL和DML"></a>DDL和DML</h4><ul><li>DDL是数据定义语言，有：create、drop、alter、truncate</li><li>DML是数据操作语言，有：insert、update、delete、select等</li></ul><h4 id="SQL优化的经验"><a href="#SQL优化的经验" class="headerlink" title="SQL优化的经验"></a>SQL优化的经验</h4><ul><li>使用索引：在经常查询的列上创建索引</li><li>避免全表扫描</li><li>选择合适的数据类型：有助于减少磁盘和内存占用，提高性能</li><li>避免索引失效的情况</li><li>避免不必要的子查询：可以使用连接操作来替代。子查询可能会导致性能下降</li><li>适当使用UNION和UNION ALL</li><li>合理的分页查询</li><li>定期维护和优化</li><li>避免在循环中执行SQL</li><li>适当使用数据库连接池</li><li>充分利用缓存</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/yoonada/yoonada.github.io/2022/11/17/shu-ju-jie-gou/"/>
      <url>/yoonada/yoonada.github.io/2022/11/17/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<p>数据结构是为实现对计算机数据有效使用的各种数据组织形式，服务于各类计算机操作。不同的数据结构具有各自对应的适用场景，旨在降低各种算法计算的时间与空间复杂度，达到最佳的任务执行效率</p><h2 id="常见的数据结构"><a href="#常见的数据结构" class="headerlink" title="常见的数据结构"></a>常见的数据结构</h2><p>常见的数据结构可以分为 <strong>线性数据结构</strong> 与 <strong>非线性数据结构</strong></p><h3 id="线性数据结构"><a href="#线性数据结构" class="headerlink" title="线性数据结构"></a>线性数据结构</h3><ul><li>数组（Array）</li><li>链表（Linked List）</li><li>栈（Stack）</li><li>队列（Queue）</li></ul><h4 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 (Array)"></a>数组 (Array)</h4><p>数组是将相同类型的元素存储在连续内存空间的数据结构，其长度不可变。<br>构建数组需要在初始化时给定长度，并对数组每个索引元素赋值</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方式一：初始化一个长度为5的数组 array</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 元素赋值</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方式二：使用直接赋值的初始化方式</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>可变数组</strong>是经常使用的数据结构，基于数组和扩容机制实现，相比普通数组更加灵活。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 初始化可变数组</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 向尾部添加元素</span>array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="链表-Linked-List"><a href="#链表-Linked-List" class="headerlink" title="链表 (Linked List)"></a>链表 (Linked List)</h4><p>链表以节点为单位，每个元素都是一个独立的对象，在内存空间的存储是非连续的。<br>链表的节点对象具有两个成员变量： <strong>值（val）</strong>、<strong>后继节点引用（next）</strong></p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211171458499.png"></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 节点值</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 后继节点引用</span>        ListNode next<span class="token punctuation">;</span>        <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 实例化节点</span>    <span class="token comment" spellcheck="true">// 节点head</span>    ListNode n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构建引用指向</span>    n1<span class="token punctuation">.</span>next <span class="token operator">=</span> n2<span class="token punctuation">;</span>    n2<span class="token punctuation">.</span>next <span class="token operator">=</span> n3<span class="token punctuation">;</span>    </code></pre><h4 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a>栈（stack）</h4><p>栈是一种具有 <strong>“先入后出”</strong> 特点的抽象数据结构，可使用数组或链表实现</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211171504650.png"></p><pre class=" language-java"><code class="language-java">    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 元素1进栈</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 元素2进栈</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 出栈 -> 元素2</span>    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 出栈 -> 元素1</span>    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：通常情况下，<strong>不推荐使用Java的Vector以及其子类Stack</strong>，而<strong>一般将LinkedList作为栈</strong>来使用。实现如下：</p><pre class=" language-java"><code class="language-java">    LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 元素1入栈</span>    stack<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 元素2入栈</span>    stack<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 出栈 -> 元素2</span>    stack<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 出栈 -> 元素1</span>    stack<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h4><p>队列是一种具有 <strong>“先入先出”</strong> 特点的抽象数据结构，可使用链表实现</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211171518429.png"></p><pre class=" language-java"><code class="language-java">    Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 元素1入队</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 元素2入队</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除第一个</span>    <span class="token comment" spellcheck="true">// 出队 -> 元素1</span>    queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 出队 -> 元素2</span>    queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="非线性数据结构"><a href="#非线性数据结构" class="headerlink" title="非线性数据结构"></a>非线性数据结构</h3><ul><li>树（Tree）</li><li>堆（Heap）</li><li>散列表（Hashing）</li><li>图（Graph）</li></ul><h4 id="树（Tree）"><a href="#树（Tree）" class="headerlink" title="树（Tree）"></a>树（Tree）</h4><p>树是一种非线性数据结构，根据子节点数量可分为 「二叉树」 和 「多叉树」，最顶层的节点称为「根节点 root」。<br>以二叉树为例，每个节点包含三个成员变量：<strong>「值 val」、「左子节点 left」、「右子节点 right」</strong> 。</p><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211171533713.png"></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 节点值</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 左子节点</span>        TreeNode left<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 右子节点</span>        TreeNode right<span class="token punctuation">;</span>        <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 初始化节点</span>    <span class="token comment" spellcheck="true">// 根节点 root</span>    TreeNode n1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode n2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode n3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode n4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode n5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构建引用指向</span>    n1<span class="token punctuation">.</span>left <span class="token operator">=</span> n2<span class="token punctuation">;</span>    n1<span class="token punctuation">.</span>right <span class="token operator">=</span> n3<span class="token punctuation">;</span>    n2<span class="token punctuation">.</span>left <span class="token operator">=</span> n4<span class="token punctuation">;</span>    n2<span class="token punctuation">.</span>right <span class="token operator">=</span> n5<span class="token punctuation">;</span>      </code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识总结</title>
      <link href="/yoonada/yoonada.github.io/2022/11/16/zhi-shi-zong-jie/"/>
      <url>/yoonada/yoonada.github.io/2022/11/16/zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="85a54badb0ad855d6dd4188572d026f2ef9bd27b603f0f7bbae7c135de6ce116"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/yoonada/yoonada.github.io/lib/hbe.js"></script><link href="/yoonada/yoonada.github.io/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 知识总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序-冒泡排序</title>
      <link href="/yoonada/yoonada.github.io/2022/11/15/pai-xu-mou-pao-pai-xu/"/>
      <url>/yoonada/yoonada.github.io/2022/11/15/pai-xu-mou-pao-pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="算法解析"><a href="#算法解析" class="headerlink" title="算法解析"></a>算法解析</h3><p>冒泡排序是最基础的排序算法，由于其直观性，经常作为首个介绍的排序算法。其原理为：</p><ul><li>内循环： 使用相邻双指针 j , j + 1 从左至右遍历，依次比较相邻元素大小，若左元素大于右元素则将它们交换；遍历完成时，最大元素会被交换至数组最右边 。</li><li>外循环： 不断重复「内循环」，每轮将当前最大元素交换至 剩余未排序数组最右边 ，直至所有元素都被交换至正确位置时结束。</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/phn3m1/">https://leetcode.cn/leetbook/read/illustration-of-algorithm/phn3m1/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序-快速排序</title>
      <link href="/yoonada/yoonada.github.io/2022/11/15/pai-xu-kuai-su-pai-xu/"/>
      <url>/yoonada/yoonada.github.io/2022/11/15/pai-xu-kuai-su-pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="算法解析"><a href="#算法解析" class="headerlink" title="算法解析"></a>算法解析</h3><p>快速排序算法有两个核心点，分别是 <strong>哨兵划分</strong> 和 <strong>递归</strong></p><h4 id="哨兵划分"><a href="#哨兵划分" class="headerlink" title="哨兵划分"></a>哨兵划分</h4><p>以数组某个元素（一般选取首元素）为<strong>基准数</strong>，将所有<strong>小于基准数的元素移动到其左边，大于基准数的元素移动至其右边</strong>。<br>通过一轮<strong>哨兵划分</strong>，可将数组排序问题拆分为 两个较短数组的排序问题 （本文称之为左（右）子数组）。<br><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211151555807.png"><br><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211151556566.png"><br><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211151557910.png"><br><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211151555113.png"></p><pre class=" language-text"><code class="language-text">初始化“哨兵”索引位置，以arr[l]为基准数循环交换，两哨兵相遇时跳出    从右向左 查找 首个小于基准数的元素    从左向右 查找 首个大约基准数的元素    交换 arr[i] 和 arr[j]交换基准数 arr[l] 和 arr[i]</code></pre><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>对<strong>左子数组</strong>和<strong>右子数组</strong>分别<strong>递归</strong>执行<strong>哨兵划分</strong>，直至子数组长度为1时终止递归，即可完成对整个数组的排序</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 找到哨兵</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归左数组</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归右数组</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 找哨兵     *     * @param nums     * @param l     * @param r     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 以nums[l]作为基准数</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// i为左，j为右</span>            <span class="token comment" spellcheck="true">// 从右向左找首个小于基准数l（i）的元素</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 从左向右找首个大于基准数l（i）的元素</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 开始交换</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 相等时，交换基准数与当前位置</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://leetcode.cn/leetbook/read/grokking-algorithms/royq0v/">https://leetcode.cn/leetbook/read/grokking-algorithms/royq0v/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装window常用开发软件</title>
      <link href="/yoonada/yoonada.github.io/2022/11/01/an-zhuang-window-chang-yong-kai-fa-ruan-jian/"/>
      <url>/yoonada/yoonada.github.io/2022/11/01/an-zhuang-window-chang-yong-kai-fa-ruan-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="Navicat16破解版安装包"><a href="#Navicat16破解版安装包" class="headerlink" title="Navicat16破解版安装包"></a>Navicat16破解版安装包</h3><p><a href="https://yoonada.oss-cn-shenzhen.aliyuncs.com/software/Navcat16%E5%AE%89%E8%A3%85%E6%BF%80%E6%B4%BB.zip">https://yoonada.oss-cn-shenzhen.aliyuncs.com/software/Navcat16%E5%AE%89%E8%A3%85%E6%BF%80%E6%B4%BB.zip</a></p><h3 id="XShell7全套安装包"><a href="#XShell7全套安装包" class="headerlink" title="XShell7全套安装包"></a>XShell7全套安装包</h3><p><a href="https://yoonada.oss-cn-shenzhen.aliyuncs.com/software/Xshell7%26%26Xftp7.zip">https://yoonada.oss-cn-shenzhen.aliyuncs.com/software/Xshell7%26%26Xftp7.zip</a></p>]]></content>
      
      
      <categories>
          
          <category> 装机软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> navicat </tag>
            
            <tag> 装机软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坐标系转换SQL版</title>
      <link href="/yoonada/yoonada.github.io/2022/11/01/zuo-biao-xi-zhuan-huan-sql-ban/"/>
      <url>/yoonada/yoonada.github.io/2022/11/01/zuo-biao-xi-zhuan-huan-sql-ban/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">坐标系</th><th align="center">解释</th><th align="center">使用地图</th></tr></thead><tbody><tr><td align="center">WGS84</td><td align="center">地球坐标系，国际上通用的坐标系。设备一般包含GPS芯片或者北斗芯片获取的经纬度为WGS84地理坐标系,最基础的坐标，谷歌地图在非中国地区使用的坐标系</td><td align="center">GPS/谷歌地图卫星</td></tr><tr><td align="center">GCJ02</td><td align="center">火星坐标系，是由中国国家测绘局制订的地理信息系统的坐标系统。并要求在中国使用的地图产品使用的都必须是加密后的坐标，而这套WGS84加密后的坐标就是GCJ02。</td><td align="center">腾讯(搜搜)地图，阿里云地图，高德地图，谷歌国内地图</td></tr><tr><td align="center">BD09</td><td align="center">百度坐标系，百度在GCJ02的基础上进行了二次加密</td><td align="center">百度地图</td></tr></tbody></table><h4 id="百度地图坐标系转高德地图（BD09转GCJ02）"><a href="#百度地图坐标系转高德地图（BD09转GCJ02）" class="headerlink" title="百度地图坐标系转高德地图（BD09转GCJ02）"></a>百度地图坐标系转高德地图（BD09转GCJ02）</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token punctuation">(</span>        <span class="token punctuation">(</span>            SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                    longitude <span class="token operator">-</span> <span class="token number">0.0065</span>                 <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">0.0065</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">0.006</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">0.006</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.00002</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">0.006</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">*</span> <span class="token number">3000.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span>            ATAN2<span class="token punctuation">(</span><span class="token punctuation">(</span>                    latitude <span class="token operator">-</span> <span class="token number">0.006</span>                     <span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">0.0065</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.000003</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">0.0065</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">*</span> <span class="token number">3000.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">)</span> <span class="token keyword">AS</span> longitude<span class="token punctuation">,</span>    <span class="token punctuation">(</span>        <span class="token punctuation">(</span>            SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                    longitude <span class="token operator">-</span> <span class="token number">0.0065</span>                     <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">0.0065</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">0.006</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">0.006</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.00002</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">0.006</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">*</span> <span class="token number">3000.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                ATAN2<span class="token punctuation">(</span><span class="token punctuation">(</span>                        latitude <span class="token operator">-</span> <span class="token number">0.006</span>                         <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">0.0065</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.000003</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">0.0065</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">*</span> <span class="token number">3000.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">)</span> <span class="token keyword">AS</span> latitude <span class="token keyword">FROM</span>    <span class="token punctuation">`</span>coordinate_system<span class="token punctuation">`</span> <span class="token keyword">WHERE</span>    <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'百度地图'</span><span class="token punctuation">;</span></code></pre><h4 id="高德地图（谷歌地图-x2F-腾讯地图）坐标系转百度地图坐标系-（GCJ02转BD09）"><a href="#高德地图（谷歌地图-x2F-腾讯地图）坐标系转百度地图坐标系-（GCJ02转BD09）" class="headerlink" title="高德地图（谷歌地图/腾讯地图）坐标系转百度地图坐标系  （GCJ02转BD09）"></a>高德地图（谷歌地图/腾讯地图）坐标系转百度地图坐标系  （GCJ02转BD09）</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>                SQRT<span class="token punctuation">(</span> longitude <span class="token operator">*</span> longitude <span class="token operator">+</span> latitude <span class="token operator">*</span> latitude <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.00002</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> latitude <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span>                ATAN2<span class="token punctuation">(</span> latitude<span class="token punctuation">,</span> longitude <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.000003</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span> longitude <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.0065</span>         <span class="token punctuation">)</span>     <span class="token punctuation">)</span> <span class="token keyword">AS</span> longitude<span class="token punctuation">,</span>    <span class="token punctuation">(</span>        <span class="token punctuation">(</span>            SQRT<span class="token punctuation">(</span> longitude <span class="token operator">*</span> longitude <span class="token operator">+</span> latitude <span class="token operator">*</span> latitude <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.00002</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> latitude <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span>        ATAN2<span class="token punctuation">(</span> latitude<span class="token punctuation">,</span> longitude <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.000003</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span> longitude <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.006</span>     <span class="token punctuation">)</span> <span class="token keyword">AS</span> latitude <span class="token keyword">FROM</span>    <span class="token punctuation">`</span>coordinate_system<span class="token punctuation">`</span> <span class="token keyword">WHERE</span>    <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'谷歌地图/高德地图/腾讯地图'</span><span class="token punctuation">;</span></code></pre><h4 id="GPS转谷歌地图-x2F-高德地图-x2F-腾讯地图-（WGS84转GCJ02）"><a href="#GPS转谷歌地图-x2F-高德地图-x2F-腾讯地图-（WGS84转GCJ02）" class="headerlink" title="GPS转谷歌地图/高德地图/腾讯地图 （WGS84转GCJ02）"></a>GPS转谷歌地图/高德地图/腾讯地图 （WGS84转GCJ02）</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token punctuation">(</span>        longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                    <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                        ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                    <span class="token punctuation">(</span>                    <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                     <span class="token punctuation">)</span>                 <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>            <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                    latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>         <span class="token punctuation">)</span>     <span class="token punctuation">)</span> <span class="token keyword">AS</span> longitude<span class="token punctuation">,</span>    <span class="token punctuation">(</span>        latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                        ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                longitude <span class="token operator">-</span> <span class="token number">105.0</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                        <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                    <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                    SQRT<span class="token punctuation">(</span>                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>         <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> latitude <span class="token keyword">FROM</span>    coordinate_system <span class="token keyword">WHERE</span>    <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'GPS'</span><span class="token punctuation">;</span></code></pre><h4 id="GPS转百度地图（实际上就是，先转高德，再转百度地图）"><a href="#GPS转百度地图（实际上就是，先转高德，再转百度地图）" class="headerlink" title="GPS转百度地图（实际上就是，先转高德，再转百度地图）"></a>GPS转百度地图（实际上就是，先转高德，再转百度地图）</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>                SQRT<span class="token punctuation">(</span>                    <span class="token punctuation">(</span>                        longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                    <span class="token punctuation">(</span>                                    <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span>                                 <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span>                         <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                        longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                    <span class="token punctuation">(</span>                                    <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span>                                 <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span>                         <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>                        latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                    SQRT<span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                        latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                    SQRT<span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span><span class="token punctuation">)</span>                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.00002</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span>                    <span class="token punctuation">(</span>                        latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                    SQRT<span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span>                ATAN2<span class="token punctuation">(</span>                    <span class="token punctuation">(</span>                        latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                    SQRT<span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">(</span>                        longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                    <span class="token punctuation">(</span>                                    <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span>                                 <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span>                     <span class="token punctuation">)</span>                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.000003</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span>                    <span class="token punctuation">(</span>                        longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                        ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                    <span class="token punctuation">(</span>                                    <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                     <span class="token punctuation">)</span>                                 <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                             <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                         <span class="token punctuation">)</span>                     <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.0065</span>         <span class="token punctuation">)</span>     <span class="token punctuation">)</span> <span class="token keyword">AS</span> longitude<span class="token punctuation">,</span>    <span class="token punctuation">(</span>        <span class="token punctuation">(</span>            SQRT<span class="token punctuation">(</span>                <span class="token punctuation">(</span>                    longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span>                                <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span>                             <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                        <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span>                     <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                    longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span>                                <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span>                             <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                        <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span>                     <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>                    latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                     <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                    latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                     <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.00002</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span>                <span class="token punctuation">(</span>                    latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                     <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span>            ATAN2<span class="token punctuation">(</span>                <span class="token punctuation">(</span>                    latitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token punctuation">(</span><span class="token operator">-</span> <span class="token number">100.0</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            longitude <span class="token operator">-</span> <span class="token number">105.0</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">160.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">320</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                            <span class="token number">6378245.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                        latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                     <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>                                SQRT<span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span>                    longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span>                                <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span>                             <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                        <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span>                 <span class="token punctuation">)</span>                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.000003</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span>                <span class="token punctuation">(</span>                    longitude <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">300.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> latitude <span class="token operator">-</span> <span class="token number">35.0</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> SQRT<span class="token punctuation">(</span>                                    ABS<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">6.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>                                <span class="token number">20.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>                                <span class="token punctuation">(</span>                                <span class="token number">150.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">12.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">300.0</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span> <span class="token punctuation">(</span> longitude <span class="token operator">-</span> <span class="token number">105.0</span> <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span>                                 <span class="token punctuation">)</span>                             <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">180.0</span>                         <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                        <span class="token number">6378245.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>                            SQRT<span class="token punctuation">(</span><span class="token punctuation">(</span>                                    <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0.00669342162296594323</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIN<span class="token punctuation">(</span><span class="token punctuation">(</span>                                            latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                                         <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> COS<span class="token punctuation">(</span><span class="token punctuation">(</span>                                latitude <span class="token operator">/</span> <span class="token number">180.0</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>                     <span class="token punctuation">)</span>                 <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3.14159265358979323846</span>             <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.006</span>     <span class="token punctuation">)</span> <span class="token keyword">AS</span> latitude <span class="token keyword">FROM</span>    <span class="token punctuation">`</span>coordinate_system<span class="token punctuation">`</span> <span class="token keyword">WHERE</span>    <span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">'GPS'</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 坐标系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合redis</title>
      <link href="/yoonada/yoonada.github.io/2022/11/01/springboot-zheng-he-redis/"/>
      <url>/yoonada/yoonada.github.io/2022/11/01/springboot-zheng-he-redis/</url>
      
        <content type="html"><![CDATA[<h3 id="引入maven依赖"><a href="#引入maven依赖" class="headerlink" title="引入maven依赖"></a>引入maven依赖</h3><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonTypeInfo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>jsontype<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>LaissezFaireSubTypeValidator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: * @date 2022-05-10 14:44 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//JSON序列化配置</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">activateDefaultTyping</span><span class="token punctuation">(</span>LaissezFaireSubTypeValidator<span class="token punctuation">.</span>instance<span class="token punctuation">,</span> ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">,</span> JsonTypeInfo<span class="token punctuation">.</span>As<span class="token punctuation">.</span>PROPERTY<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//String 序列化</span>        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// key采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的key也采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>CacheManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>CachingConfigurerSupport<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableCaching<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>RedisCacheConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>RedisCacheManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>RedisCacheWriter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>RedisSerializationContext<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: * @date 2022-05-10 16:28 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableCaching</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisCacheConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CacheManager <span class="token function">cacheManager</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 以锁写入的方式创建RedisCacheWriter对象</span>        RedisCacheWriter writer <span class="token operator">=</span> RedisCacheWriter<span class="token punctuation">.</span><span class="token function">lockingRedisCacheWriter</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置CacheManager的Value序列化方式</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisSerializationContext<span class="token punctuation">.</span>SerializationPair pair <span class="token operator">=</span> RedisSerializationContext<span class="token punctuation">.</span>SerializationPair<span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建默认缓存配置对象、 将@Cacheable缓存key值时默认会给value或cacheNames后加上双冒号 改为 单冒号</span>        RedisCacheConfiguration config <span class="token operator">=</span> RedisCacheConfiguration<span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">computePrefixWith</span><span class="token punctuation">(</span>name <span class="token operator">-</span><span class="token operator">></span> name <span class="token operator">+</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisCacheManager cacheManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cacheManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="编写工具类"><a href="#编写工具类" class="headerlink" title="编写工具类"></a>编写工具类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>CollectionUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: * @date 2022-05-10 14:51 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 指定缓存失效时间     *     * @param key  键     * @param time 时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据key 获取过期时间     *     * @param key 键 不能为null     * @return 时间(秒) 返回0代表为永久有效     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断key是否存在     *     * @param key 键     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除缓存     *     * @param key 可以传一个值 或多个     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> CollectionUtils<span class="token punctuation">.</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ============================String=============================</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存获取     *     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入     *     * @param key   键     * @param value 值     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入并设置时间     *     * @param key   键     * @param value 值     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递增     *     * @param key   键     * @param delta 要增加几(大于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">incr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递增因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递减     *     * @param key   键     * @param delta 要减少几(小于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递减因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ================================Map=================================</span>    <span class="token comment" spellcheck="true">/**     * HashGet     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">hget</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取hashKey对应的所有键值     *     * @param key 键     * @return 对应的多个键值     */</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">hmget</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet     *     * @param key 键     * @param map 对应多个键值     * @return true 成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet 并设置时间     *     * @param key  键     * @param map  对应多个键值     * @param time 时间(秒)     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除hash表中的值     *     * @param key  键 不能为null     * @param item 项 可以使多个 不能为null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hdel</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断hash表中是否有该项的值     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递增 如果不存在,就会创建一个 并把新增后的值返回     *     * @param key  键     * @param item 项     * @param by   要增加几(大于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hincr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递减     *     * @param key  键     * @param item 项     * @param by   要减少记(小于0)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hdecr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token operator">-</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ============================set=============================</span>    <span class="token comment" spellcheck="true">/**     * 根据key获取Set中的所有值     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">sGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据value从一个set中查询,是否存在     *     * @param key   键     * @param value 值     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将数据放入set缓存     *     * @param key    键     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将set数据放入缓存     *     * @param key    键     * @param time   时间(秒)     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSetAndTime</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取set缓存的长度     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sGetSetSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除值为value的     *     * @param key    键     * @param values 值 可以是多个     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">setRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ===============================list=================================</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的内容     *     * @param key   键     * @param start 开始     * @param end   结束 0 到 -1代表所有值     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">lGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的长度     *     * @param key 键     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lGetListSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过索引 获取list中的值     *     * @param key   键     * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推     * @return     */</span>    <span class="token keyword">public</span> Object <span class="token function">lGetIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据索引修改list中的某条数据     *     * @param key   键     * @param index 索引     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lUpdateIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除N个值为value     *     * @param key   键     * @param count 移除多少个     * @param value 值     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long remove <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> remove<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="bootstrap-yml"><a href="#bootstrap-yml" class="headerlink" title="bootstrap.yml"></a>bootstrap.yml</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span>     <span class="token key atrule">port</span><span class="token punctuation">:</span>     <span class="token key atrule">password</span><span class="token punctuation">:</span>     <span class="token key atrule">jedis</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 连接池最大连接数（使用负值表示没有限制）</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>        <span class="token comment" spellcheck="true"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>1ms        <span class="token comment" spellcheck="true"># 连接池中的最大空闲连接</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>        <span class="token comment" spellcheck="true"># 连接池中的最小空闲连接</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 连接超时时间（毫秒）默认是2000ms</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 2000ms</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo配置图床</title>
      <link href="/yoonada/yoonada.github.io/2022/11/01/picgo-pei-zhi-tu-chuang/"/>
      <url>/yoonada/yoonada.github.io/2022/11/01/picgo-pei-zhi-tu-chuang/</url>
      
        <content type="html"><![CDATA[<h3 id="官网下载最新正式版并安装"><a href="#官网下载最新正式版并安装" class="headerlink" title="官网下载最新正式版并安装"></a>官网下载最新正式版并安装</h3><p><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><h3 id="配置阿里云OSS"><a href="#配置阿里云OSS" class="headerlink" title="配置阿里云OSS"></a>配置阿里云OSS</h3><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211011524621.png"></p><h3 id="Typora配置PicGo"><a href="#Typora配置PicGo" class="headerlink" title="Typora配置PicGo"></a>Typora配置PicGo</h3><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211011526352.png"></p>]]></content>
      
      
      <categories>
          
          <category> PicGo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker搭建MySQL的主从复制</title>
      <link href="/yoonada/yoonada.github.io/2022/10/31/docker-da-jian-mysql-de-zhu-cong-fu-zhi/"/>
      <url>/yoonada/yoonada.github.io/2022/10/31/docker-da-jian-mysql-de-zhu-cong-fu-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="docker拉取MySQL5-7的镜像"><a href="#docker拉取MySQL5-7的镜像" class="headerlink" title="docker拉取MySQL5.7的镜像"></a>docker拉取MySQL5.7的镜像</h3><pre class=" language-shell"><code class="language-shell">docker pull mysql:5.7</code></pre><h3 id="创建主库的数据目录"><a href="#创建主库的数据目录" class="headerlink" title="创建主库的数据目录"></a>创建主库的数据目录</h3><pre class=" language-shell"><code class="language-shell">mkdir -p /usr/local/mysql/mysql-master/{data,conf,log}</code></pre><h3 id="创建主库配置文件my-cnf"><a href="#创建主库配置文件my-cnf" class="headerlink" title="创建主库配置文件my.cnf"></a>创建主库配置文件my.cnf</h3><pre class=" language-shell"><code class="language-shell">vim /usr/local/mysql/mysql-master/conf/my.cnf</code></pre><pre class=" language-shell"><code class="language-shell">[mysqld]## 设置server_id，在同一局域网中需要唯一server_id=1## 指定不需要同步的数据库名称binlog-ignore-db=mysql## 指定需要同步的数据库## binlog-do-db=db1## 开启二进制日志功能log-bin=mall-mysql-bin## 数据库时区default-time_zone='+8:00'## 设置二进制日志使用内存大小（事务）binlog_cache_size=1M## 设置使用的二进制日志格式（row-行级别；statement=语句级别；mixed-混合级别）binlog_format=mixed## 二进制日志过期清理时间。默认为0，表示不自动清理expire_logs_days=7## 忽略主从复制中遇到的所有错误活指定的错误类型，避免slave端复制中断## 如：1062错误码代表主键重复；1032错误码代表主从数据库数据不一致slave_skip_errors=1062</code></pre><h3 id="启动主库"><a href="#启动主库" class="headerlink" title="启动主库"></a>启动主库</h3><pre class=" language-shell"><code class="language-shell">docker run -d -p 3308:3306 --privileged=true \-v /usr/local/mysql/mysql-master/log:/var/log/mysql  \-v /usr/local/mysql/mysql-master/data:/var/lib/mysql  \-v /usr/local/mysql/mysql-master/conf:/etc/mysql/conf.d \-e MYSQL_ROOT_PASSWORD=root123456 \--name mysql-master mysql:5.7</code></pre><h3 id="查看主库容器的ip并记录起来"><a href="#查看主库容器的ip并记录起来" class="headerlink" title="查看主库容器的ip并记录起来"></a>查看主库容器的ip并记录起来</h3><pre class=" language-shell"><code class="language-shell">docker inspect mysql-master</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211011443887.png"></p><h3 id="进入主库容器"><a href="#进入主库容器" class="headerlink" title="进入主库容器"></a>进入主库容器</h3><pre class=" language-shell"><code class="language-shell">docker exec -it mysql-master /bin/bash</code></pre><h3 id="登录主库"><a href="#登录主库" class="headerlink" title="登录主库"></a>登录主库</h3><pre class=" language-shell"><code class="language-shell">mysql -uroot -proot123456 -P3308</code></pre><h3 id="创建slave数据同步用户"><a href="#创建slave数据同步用户" class="headerlink" title="创建slave数据同步用户"></a>创建slave数据同步用户</h3><pre class=" language-shell"><code class="language-shell">CREATE USER 'slave'@'%' IDENTIFIED BY 'root123456';</code></pre><pre class=" language-shell"><code class="language-shell">GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%';</code></pre><h3 id="在主机中查看主机当前状态"><a href="#在主机中查看主机当前状态" class="headerlink" title="在主机中查看主机当前状态"></a>在主机中查看主机当前状态</h3><pre class=" language-shell"><code class="language-shell">show master status;</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211011444213.png"></p><h3 id="另起一个终端，创建从库"><a href="#另起一个终端，创建从库" class="headerlink" title="另起一个终端，创建从库"></a>另起一个终端，创建从库</h3><pre class=" language-shell"><code class="language-shell">mkdir -p /usr/local/mysql/mysql-slave01/{data,conf,log}</code></pre><h3 id="创建从库配置文件my-cnf"><a href="#创建从库配置文件my-cnf" class="headerlink" title="创建从库配置文件my.cnf"></a>创建从库配置文件my.cnf</h3><pre class=" language-shell"><code class="language-shell">vim /usr/local/mysql/mysql-slave01/conf/my.cnf</code></pre><pre class=" language-shell"><code class="language-shell">[mysqld]## 设置server_id，同一局域网中需要唯一server_id=2## 指定不需要同步的数据库binlog-ignore-db=mysql## 开启二进制日志功能，以备slave作为其它数据库实例的Master时使用log-bin=mall-mysql-slave1-bin## 设置二进制日志使用内存大小（事务）binlog_cache_size=1M## 设置使用的二进制日志格式binlog_format=mixed## 二进制日志过期清理时间，默认为0，代表不自动清理expire_logs_days=7## 忽略主从复制中遇到的所有错误活指定的错误类型，避免slave端复制中断   ## 如：1062错误码代表主键重复；1032错误码代表主从数据库数据不一致slave_skip_errors=1062## relay_log配置中继日志relay_log=mall-mysql-relay-bin## log_slave_updates表示slave将复制事件写进自己的二进制日志log_slave_updates=1## slave设置为只读权限（具有super权限的用户除外）read_only=1</code></pre><h3 id="启动从库"><a href="#启动从库" class="headerlink" title="启动从库"></a>启动从库</h3><pre class=" language-shell"><code class="language-shell">docker run -d -p 3309:3306 --privileged=true \-v /usr/local/mysql/mysql-slave01/log:/var/log/mysql  \-v /usr/local/mysql/mysql-slave01/data:/var/lib/mysql  \-v /usr/local/mysql/mysql-slave01/conf:/etc/mysql/conf.d \-e MYSQL_ROOT_PASSWORD=root123456 \--name mysql-slave01 mysql:5.7</code></pre><h3 id="查看从库容器的ip并记录起来"><a href="#查看从库容器的ip并记录起来" class="headerlink" title="查看从库容器的ip并记录起来"></a>查看从库容器的ip并记录起来</h3><pre class=" language-shell"><code class="language-shell">docker inspect mysql-slave01</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211011445629.png"></p><h3 id="进入从库容器"><a href="#进入从库容器" class="headerlink" title="进入从库容器"></a>进入从库容器</h3><pre class=" language-shell"><code class="language-shell">docker exec -it mysql-slave01 /bin/bash</code></pre><h3 id="登录从库"><a href="#登录从库" class="headerlink" title="登录从库"></a>登录从库</h3><pre class=" language-shell"><code class="language-shell">mysql -uroot -proot123456 -P3309</code></pre><h3 id="修改一下命令对应的信息（在从库上配置主机信息）"><a href="#修改一下命令对应的信息（在从库上配置主机信息）" class="headerlink" title="修改一下命令对应的信息（在从库上配置主机信息）"></a>修改一下命令对应的信息（在从库上配置主机信息）</h3><pre class=" language-shell"><code class="language-shell">change master to master_host='172.17.0.7',master_user='slave',master_password='root123456',master_port=3306,master_log_file='mall-mysql-bin.000003',master_log_pos=617,master_connect_retry=30;</code></pre><h3 id="查看从库状态"><a href="#查看从库状态" class="headerlink" title="查看从库状态"></a>查看从库状态</h3><pre class=" language-shell"><code class="language-shell">show slave status \G</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211011453134.png"><br>查看Slave_IO_Running，Slave_SQL_Running两个参数，当前为no，表示暂未开始主从同步。</p><h3 id="从机开启主从同步-然后再次查看从机状态发现两个参数为true，即表示配置成功"><a href="#从机开启主从同步-然后再次查看从机状态发现两个参数为true，即表示配置成功" class="headerlink" title="从机开启主从同步,然后再次查看从机状态发现两个参数为true，即表示配置成功"></a>从机开启主从同步,然后再次查看从机状态发现两个参数为true，即表示配置成功</h3><pre class=" language-shell"><code class="language-shell">start slave;</code></pre><pre class=" language-shell"><code class="language-shell">show slave status \G</code></pre><p><img src="https://yoonada.oss-cn-shenzhen.aliyuncs.com/images/202211011456238.png"></p>]]></content>
      
      
      <categories>
          
          <category> CentOS7 </category>
          
          <category> docker </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> MySQL </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>doris-1.1.3的编译</title>
      <link href="/yoonada/yoonada.github.io/2022/10/26/doris-1-1-3-de-bian-yi/"/>
      <url>/yoonada/yoonada.github.io/2022/10/26/doris-1-1-3-de-bian-yi/</url>
      
        <content type="html"><![CDATA[<h3 id="1、创建存放doris的目录"><a href="#1、创建存放doris的目录" class="headerlink" title="1、创建存放doris的目录"></a>1、创建存放doris的目录</h3><pre class=" language-shell"><code class="language-shell">/home/software/doris-1.1.3</code></pre><h3 id="2、下载doris-1-1-3源码"><a href="#2、下载doris-1-1-3源码" class="headerlink" title="2、下载doris-1.1.3源码"></a>2、下载doris-1.1.3源码</h3><pre class=" language-shell"><code class="language-shell">cd /home/software/doris-1.1.3</code></pre><pre class=" language-shell"><code class="language-shell">wget https://mirrors.tuna.tsinghua.edu.cn/apache/doris/1.1/1.1.3-rc02/apache-doris-1.1.3-src.tar.gz --no-check-certificate</code></pre><h3 id="3、解压"><a href="#3、解压" class="headerlink" title="3、解压"></a>3、解压</h3><pre class=" language-shell"><code class="language-shell">tar -zxvf apache-doris-1.1.3-src.tar.gz </code></pre><h3 id="4、通过docker拉取docker-1-1-3对应的镜像版本-目前是这个"><a href="#4、通过docker拉取docker-1-1-3对应的镜像版本-目前是这个" class="headerlink" title="4、通过docker拉取docker-1.1.3对应的镜像版本(目前是这个)"></a>4、通过docker拉取docker-1.1.3对应的镜像版本(目前是这个)</h3><p>具体查看 <a href="https://doris.apache.org/zh-CN/docs/dev/install/source-install/compilation">https://doris.apache.org/zh-CN/docs/dev/install/source-install/compilation</a></p><pre class=" language-shell"><code class="language-shell">docker pull apache/doris:build-env-ldb-toolchain-latest</code></pre><h3 id="5、做两个目录映射，一个是maven的repository目录，一个是doris源码目录，避免容器挂了之后之前下载或编译的内容丢失"><a href="#5、做两个目录映射，一个是maven的repository目录，一个是doris源码目录，避免容器挂了之后之前下载或编译的内容丢失" class="headerlink" title="5、做两个目录映射，一个是maven的repository目录，一个是doris源码目录，避免容器挂了之后之前下载或编译的内容丢失"></a>5、做两个目录映射，一个是maven的repository目录，一个是doris源码目录，避免容器挂了之后之前下载或编译的内容丢失</h3><pre class=" language-shell"><code class="language-shell">docker run -it -v /usr/local/maven/repository:/root/.m2 -v /home/software/doris-1.1.3/apache-doris-1.1.3-src:/root/doris-1.3.0/apache-doris-1.1.3-src apache/doris:build-env-ldb-toolchain-latest</code></pre><h3 id="6、查看java的版本，默认是jdk11"><a href="#6、查看java的版本，默认是jdk11" class="headerlink" title="6、查看java的版本，默认是jdk11"></a>6、查看java的版本，默认是jdk11</h3><pre class=" language-shell"><code class="language-shell">java -version</code></pre><h3 id="7、切换到jdk8吧"><a href="#7、切换到jdk8吧" class="headerlink" title="7、切换到jdk8吧"></a>7、切换到jdk8吧</h3><pre class=" language-shell"><code class="language-shell">alternatives --set java java-1.8.0-openjdk.x86_64</code></pre><pre class=" language-shell"><code class="language-shell">alternatives --set javac java-1.8.0-openjdk.x86_64</code></pre><pre class=" language-shell"><code class="language-shell">export JAVA_HOME=/usr/lib/jvm/java-1.8.0</code></pre><pre class=" language-shell"><code class="language-shell">java -version</code></pre><h3 id="8、进入到doris-1-1-3目录中"><a href="#8、进入到doris-1-1-3目录中" class="headerlink" title="8、进入到doris-1.1.3目录中"></a>8、进入到doris-1.1.3目录中</h3><pre class=" language-shell"><code class="language-shell">cd doris-1.3.0/apache-doris-1.1.3-src</code></pre><h3 id="9、开始编译-至少需要两个小时"><a href="#9、开始编译-至少需要两个小时" class="headerlink" title="9、开始编译 (至少需要两个小时)"></a>9、开始编译 (至少需要两个小时)</h3><pre class=" language-shell"><code class="language-shell">sh build.sh</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> doris </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合RabbitMQ</title>
      <link href="/yoonada/yoonada.github.io/2022/09/26/springboot-zheng-he-rabbitmq/"/>
      <url>/yoonada/yoonada.github.io/2022/09/26/springboot-zheng-he-rabbitmq/</url>
      
        <content type="html"><![CDATA[<h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="2、application-yml配置如下："><a href="#2、application-yml配置如下：" class="headerlink" title="2、application.yml配置如下："></a>2、application.yml配置如下：</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> xxx.xxx.xxx.xxx    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /yoona<span class="token punctuation">-</span>cloud</code></pre><h4 id="3、枚举关系"><a href="#3、枚举关系" class="headerlink" title="3、枚举关系"></a>3、枚举关系</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>IBaseEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 队列枚举 * @date 2022-06-17 11:25 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RabbitMqQueueEnum <span class="token keyword">implements</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 枚举所有队列     */</span>        <span class="token function">Q_MAIL_SEND</span><span class="token punctuation">(</span><span class="token string">"Q_MAIL_SEND"</span><span class="token punctuation">,</span> <span class="token string">"邮件发送队列"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>IBaseEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 交换机枚举 * @date 2022-06-17 11:35 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RabbitMqExchangeEnum <span class="token keyword">implements</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 枚举所有交换机     */</span>    <span class="token function">E_TOPIC_MAIL_SEND</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">,</span><span class="token string">"topic类型的邮件发送交换机"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>IBaseEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 路由枚举 * @date 2022-06-17 11:39 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RabbitMqRoutingKeyEnum <span class="token keyword">implements</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 枚举所有路由     */</span>    <span class="token function">K_MAIL_SEND</span><span class="token punctuation">(</span><span class="token string">"K_MAIL_SEND"</span><span class="token punctuation">,</span><span class="token string">"邮件发送路由键"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>IBaseEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 绑定关系枚举 * @date 2022-06-17 11:41 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RabbitMqBindEnum <span class="token keyword">implements</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 枚举所有绑定关系     */</span>    <span class="token function">MAIL_SEND</span><span class="token punctuation">(</span>RabbitMqExchangeEnum<span class="token punctuation">.</span>E_TOPIC_MAIL_SEND<span class="token punctuation">,</span> RabbitMqQueueEnum<span class="token punctuation">.</span>Q_MAIL_SEND<span class="token punctuation">,</span> RabbitMqRoutingKeyEnum<span class="token punctuation">.</span>K_MAIL_SEND<span class="token punctuation">,</span><span class="token boolean">true</span> <span class="token punctuation">,</span><span class="token string">"MAIL_SEND"</span><span class="token punctuation">,</span> <span class="token string">"邮件发送"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RabbitMqExchangeEnum rabbitMqExchangeEnum<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RabbitMqQueueEnum rabbitMqQueueEnum<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RabbitMqRoutingKeyEnum rabbitMqRoutingKeyEnum<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Boolean isBind<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DirectExchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Exchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>TopicExchange<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: * @date 2022-06-17 11:54 */</span><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">enum</span> RabbitMqExchangeTypeEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据交换机的类型，创建对应的交换机     */</span>    <span class="token function">DIRECT</span><span class="token punctuation">(</span><span class="token string">"direct"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Exchange <span class="token function">createExchange</span><span class="token punctuation">(</span>String exchangeName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">TOPIC</span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Exchange <span class="token function">createExchange</span><span class="token punctuation">(</span>String exchangeName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RabbitMqExchangeTypeEnum <span class="token function">getInstanceByType</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>RabbitMqExchangeTypeEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"无效的exchange type"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String type<span class="token punctuation">;</span>    <span class="token function">RabbitMqExchangeTypeEnum</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建交换机     * @param exchangeName     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Exchange <span class="token function">createExchange</span><span class="token punctuation">(</span>String exchangeName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="4、配置"><a href="#4、配置" class="headerlink" title="4、配置"></a>4、配置</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>RabbitMqBindEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>RabbitMqExchangeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>message<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>RabbitMqExchangeTypeEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Exchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableRabbit<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>config<span class="token punctuation">.</span>SimpleRabbitListenerContainerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitAdmin<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>RabbitTransactionManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>SimpleRabbitListenerContainerFactoryConfigurer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnClass<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnMissingBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: * @date 2022-06-17 11:50 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>EnableRabbit<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RabbitAdmin rabbitAdmin<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CONCURRENT <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"customContainerFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SimpleRabbitListenerContainerFactory <span class="token function">containerFactory</span><span class="token punctuation">(</span>SimpleRabbitListenerContainerFactoryConfigurer configurer<span class="token punctuation">,</span>                                                                 ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleRabbitListenerContainerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRabbitListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setConcurrentConsumers</span><span class="token punctuation">(</span>DEFAULT_CONCURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setMaxConcurrentConsumers</span><span class="token punctuation">(</span>DEFAULT_CONCURRENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        configurer<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> RabbitTransactionManager <span class="token function">rabbitTransactionManager</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTransactionManager</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> RabbitAdmin <span class="token function">rabbitAdmin</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitAdmin</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化     */</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建交换机</span>        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>RabbitMqExchangeEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>rabbitMqExchangeEnum <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Exchange exchange <span class="token operator">=</span> RabbitMqExchangeTypeEnum                                <span class="token punctuation">.</span><span class="token function">getInstanceByType</span><span class="token punctuation">(</span>rabbitMqExchangeEnum<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">createExchange</span><span class="token punctuation">(</span>rabbitMqExchangeEnum<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareExchange</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"创建交换机时发生异常:{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建队列并绑定exchange</span>        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>RabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>rabbitMqBindEnum <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">getIsBind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 无需绑定</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareQueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>rabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">getRabbitMqQueueEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareBinding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span>                    rabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">getRabbitMqQueueEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span>                    rabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">getRabbitMqExchangeEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    rabbitMqBindEnum<span class="token punctuation">.</span><span class="token function">getRabbitMqRoutingKeyEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5、实际应用例子"><a href="#5、实际应用例子" class="headerlink" title="5、实际应用例子"></a>5、实际应用例子</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>        RabbitMqExchangeEnum<span class="token punctuation">.</span>E_TOPIC_MAIL_SEND<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        RabbitMqRoutingKeyEnum<span class="token punctuation">.</span>K_MAIL_SEND<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>mailTask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token punctuation">(</span>onConstructor <span class="token operator">=</span> <span class="token annotation punctuation">@__</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Q_MAIL_SEND"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailSendListener</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitHandler</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理监到消息逻辑xxx...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus引入p6spy打印执行SQL</title>
      <link href="/yoonada/yoonada.github.io/2022/09/23/mybatis-plus-yin-ru-p6spy-da-yin-zhi-xing-sql/"/>
      <url>/yoonada/yoonada.github.io/2022/09/23/mybatis-plus-yin-ru-p6spy-da-yin-zhi-xing-sql/</url>
      
        <content type="html"><![CDATA[<p>引入p6spy方便查看执行日志，<code>MyBatis-Plus3.2.1以上</code>使用</p><p><a href="https://baomidou.com/pages/833fab/">官方文档地址</a></p><h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>p6spy<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>p6spy<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span>最新版本<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>具体版本号，可以去maven仓库去查询。</p><p><a href="https://mvnrepository.com/artifact/p6spy/p6spy">地址</a></p><h4 id="2、application-yml-配置"><a href="#2、application-yml-配置" class="headerlink" title="2、application.yml 配置"></a>2、application.yml 配置</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.p6spy.engine.spy.P6SpyDriver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>p6spy<span class="token punctuation">:</span>h2<span class="token punctuation">:</span>mem<span class="token punctuation">:</span>test    <span class="token punctuation">...</span></code></pre><h4 id="3、spy-properties-配置"><a href="#3、spy-properties-配置" class="headerlink" title="3、spy.properties 配置"></a>3、spy.properties 配置</h4><pre class=" language-text"><code class="language-text">#3.2.1以上使用modulelist=com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory#3.2.1以下使用或者不配置#modulelist=com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory# 自定义日志打印logMessageFormat=com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger#日志输出到控制台appender=com.baomidou.mybatisplus.extension.p6spy.StdoutLogger# 使用日志系统记录 sql#appender=com.p6spy.engine.spy.appender.Slf4JLogger# 设置 p6spy driver 代理deregisterdrivers=true# 取消JDBC URL前缀useprefix=true# 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.excludecategories=info,debug,result,commit,resultset# 日期格式dateformat=yyyy-MM-dd HH:mm:ss# 实际驱动可多个#driverlist=org.h2.Driver# 是否开启慢SQL记录outagedetection=true# 慢SQL记录标准 2 秒outagedetectioninterval=2</code></pre><h4 id="4、执行效果："><a href="#4、执行效果：" class="headerlink" title="4、执行效果："></a>4、执行效果：</h4><pre class=" language-text"><code class="language-text"> Consume Time：3 ms 2022-09-23 14:45:47 Execute SQL：SELECT t1.id source_id, t1.source_name, t2.id table_id, t2.table_name FROM `st_source` t1 LEFT JOIN st_table t2 ON t1.source_hash_code = t2.source_hash_code WHERE t1.is_delete = 0 AND t2.is_delete = 0</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 日常随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis-Plus </tag>
            
            <tag> 日常随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus多数据源切换</title>
      <link href="/yoonada/yoonada.github.io/2022/09/23/mybatis-plus-duo-shu-ju-yuan-qie-huan/"/>
      <url>/yoonada/yoonada.github.io/2022/09/23/mybatis-plus-duo-shu-ju-yuan-qie-huan/</url>
      
        <content type="html"><![CDATA[<p><a href="https://baomidou.com/pages/a61e1b/#%E6%96%87%E6%A1%A3-documentation">官方文档地址</a></p><h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>baomidou<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>dynamic<span class="token operator">-</span>datasource<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>具体版本号，可以去maven仓库去查询。<a href="https://mvnrepository.com/artifact/com.baomidou/dynamic-datasource-spring-boot-starter">地址</a></p><h4 id="2、配置数据源"><a href="#2、配置数据源" class="headerlink" title="2、配置数据源"></a>2、配置数据源</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>      <span class="token key atrule">primary</span><span class="token punctuation">:</span> master <span class="token comment" spellcheck="true">#设置默认的数据源或者数据源组,默认值即为master</span>      <span class="token key atrule">strict</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true">#严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">master</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//xx.xx.xx.xx<span class="token punctuation">:</span>3306/dynamic          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver <span class="token comment" spellcheck="true"># 3.2.0开始支持SPI可省略此配置</span>        <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//xx.xx.xx.xx<span class="token punctuation">:</span>3307/dynamic          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver        <span class="token key atrule">slave_2</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> ENC(xxxxx) <span class="token comment" spellcheck="true"># 内置加密,使用请查看详细文档</span>          <span class="token key atrule">username</span><span class="token punctuation">:</span> ENC(xxxxx)          <span class="token key atrule">password</span><span class="token punctuation">:</span> ENC(xxxxx)          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver       <span class="token comment" spellcheck="true">#......省略</span>       <span class="token comment" spellcheck="true">#以上会配置一个默认库master，一个组slave下有两个子库slave_1,slave_2</span></code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 多主多从                      纯粹多库（记得设置primary）                   混合配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>                               <span class="token key atrule">spring</span><span class="token punctuation">:</span>                               <span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>                           <span class="token key atrule">datasource</span><span class="token punctuation">:</span>                           <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>                              <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>                              <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>                           <span class="token key atrule">datasource</span><span class="token punctuation">:</span>                           <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">master_1</span><span class="token punctuation">:</span>                             <span class="token key atrule">mysql</span><span class="token punctuation">:</span>                                <span class="token key atrule">master</span><span class="token punctuation">:</span>        <span class="token key atrule">master_2</span><span class="token punctuation">:</span>                             <span class="token key atrule">oracle</span><span class="token punctuation">:</span>                               <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>        <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>                              <span class="token key atrule">sqlserver</span><span class="token punctuation">:</span>                            <span class="token key atrule">slave_2</span><span class="token punctuation">:</span>        <span class="token key atrule">slave_2</span><span class="token punctuation">:</span>                              <span class="token key atrule">postgresql</span><span class="token punctuation">:</span>                           <span class="token key atrule">oracle_1</span><span class="token punctuation">:</span>        <span class="token key atrule">slave_3</span><span class="token punctuation">:</span>                              <span class="token key atrule">h2</span><span class="token punctuation">:</span>                                   <span class="token key atrule">oracle_2</span><span class="token punctuation">:</span></code></pre><h4 id="3、使用-DS切换数据源"><a href="#3、使用-DS切换数据源" class="headerlink" title="3、使用@DS切换数据源"></a>3、使用@DS切换数据源</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"slave"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>  <span class="token keyword">public</span> List <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>  <span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"slave_1"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> List <span class="token function">selectByCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">"select * from user where age >10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 日常随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis-Plus </tag>
            
            <tag> 多数据源 </tag>
            
            <tag> 日常随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全局异常处理类</title>
      <link href="/yoonada/yoonada.github.io/2022/09/23/quan-ju-yi-chang-chu-li-lei/"/>
      <url>/yoonada/yoonada.github.io/2022/09/23/quan-ju-yi-chang-chu-li-lei/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StrUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseResponse<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>response<span class="token punctuation">.</span>SystemResponse<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultMessageSourceResolvable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>BindException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>BindingResult<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>MethodArgumentNotValidException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExceptionHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestControllerAdvice<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 全局异常处理类 * @date 2022-03-24 15:15 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> BaseResponse <span class="token function">exceptionHandler</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"接口:{}，发生异常，异常摘要：{}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SystemResponse<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理Get请求中 使用@Valid 验证路径中请求实体校验失败后抛出的异常     *     * @param e     * @return     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>BindException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> BaseResponse <span class="token function">bindExceptionHandler</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> BindException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String errorMessage <span class="token operator">=</span> <span class="token function">getValidErrorMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"接口:{}，发生参数校验异常，异常摘要:{}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> SystemResponse<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> SystemResponse<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理请求参数格式错误     *     * @param request     * @param e     * @return     * @RequestBody 上使用@Valid实体上使用@NotNull等，验证失败后抛出的异常是MethodArgumentNotValidException异常     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MethodArgumentNotValidException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> BaseResponse <span class="token function">methodArgumentNotValidExceptionHandler</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> MethodArgumentNotValidException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String errorMessage <span class="token operator">=</span> <span class="token function">getValidErrorMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"接口:{}，发生参数校验异常，异常摘要:{}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> SystemResponse<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> SystemResponse<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取@Valid、@Validated的异常信息     *     * @param e     * @return     */</span>    <span class="token keyword">private</span> String <span class="token function">getValidErrorMessage</span><span class="token punctuation">(</span>BindingResult e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>DefaultMessageSourceResolvable<span class="token operator">:</span><span class="token operator">:</span>getDefaultMessage<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 日常随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 日常随笔 </tag>
            
            <tag> 全局异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽取基本枚举接口</title>
      <link href="/yoonada/yoonada.github.io/2022/09/23/chou-qu-ji-ben-mei-ju-jie-kou/"/>
      <url>/yoonada/yoonada.github.io/2022/09/23/chou-qu-ji-ben-mei-ju-jie-kou/</url>
      
        <content type="html"><![CDATA[<h4 id="抽取公共的枚举类，方便一些场景下的使用"><a href="#抽取公共的枚举类，方便一些场景下的使用" class="headerlink" title="抽取公共的枚举类，方便一些场景下的使用"></a>抽取公共的枚举类，方便一些场景下的使用</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ObjectUtil<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EnumSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 基本枚举接口 * @date 2022-04-24 09:26 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取值     *     * @return     */</span>    T <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取值的描述     *     * @return     */</span>    String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据值获取枚举     *     * @param value     * @param clazz     * @param &lt;E>     * @return     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span> IBaseEnum<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> E <span class="token function">getEnumByValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>E<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EnumSet<span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> ObjectUtil<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据文本标签获取值     *     * @param value     * @param clazz     * @param &lt;E>     * @return     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span> IBaseEnum<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> String <span class="token function">getDescriptionByValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>E<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        E matchEnum <span class="token operator">=</span> EnumSet<span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> ObjectUtil<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>matchEnum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> matchEnum<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据值获取描述     *     * @param description     * @param clazz     * @param &lt;E>     * @return     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>E <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span> IBaseEnum<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> Object <span class="token function">getValueByDescription</span><span class="token punctuation">(</span>String description<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>E<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>        E matchEnum <span class="token operator">=</span> EnumSet<span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> ObjectUtil<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> description<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>matchEnum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> matchEnum<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="实际使用如下"><a href="#实际使用如下" class="headerlink" title="实际使用如下"></a>实际使用如下</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>yoona<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>base<span class="token punctuation">.</span>IBaseEnum<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author YoonaDa * @email lintiaoda@suntang.com * @description: 所有状态枚举 * @date 2022-04-22 10:25 */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">enum</span> StatusEnum <span class="token keyword">implements</span> <span class="token class-name">IBaseEnum</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 枚举所有状态     */</span>    <span class="token function">ENABLE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"启用"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">DISABLED</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"禁用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Integer value<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> String description<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 获取整个枚举</span>    StatusEnum statusEnum <span class="token operator">=</span> IBaseEnum<span class="token punctuation">.</span><span class="token function">getEnumByValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> StatusEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 结果：启用</span>    String description <span class="token operator">=</span> IBaseEnum<span class="token punctuation">.</span><span class="token function">getDescriptionByValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> StatusEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 结果：0</span>    Integer value <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> IBaseEnum<span class="token punctuation">.</span><span class="token function">getValueByDescription</span><span class="token punctuation">(</span><span class="token string">"启用"</span><span class="token punctuation">,</span> StatusEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 日常随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 日常随笔 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp实现虚拟机CentOS7的内网穿透</title>
      <link href="/yoonada/yoonada.github.io/2022/09/21/frp-shi-xian-xu-ni-ji-centos7-de-nei-wang-chuan-tou/"/>
      <url>/yoonada/yoonada.github.io/2022/09/21/frp-shi-xian-xu-ni-ji-centos7-de-nei-wang-chuan-tou/</url>
      
        <content type="html"><![CDATA[<h3 id="需要一台有公网ip的服务器和随便一台虚拟机CentOS7"><a href="#需要一台有公网ip的服务器和随便一台虚拟机CentOS7" class="headerlink" title="需要一台有公网ip的服务器和随便一台虚拟机CentOS7"></a>需要一台有公网ip的服务器和随便一台虚拟机CentOS7</h3><h2 id="含公网ip的服务器配置如下："><a href="#含公网ip的服务器配置如下：" class="headerlink" title="含公网ip的服务器配置如下："></a>含公网ip的服务器配置如下：</h2><h3 id="1、下载frp"><a href="#1、下载frp" class="headerlink" title="1、下载frp"></a>1、下载frp</h3><pre class=" language-shell"><code class="language-shell">wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_amd64.tar.gz</code></pre><h3 id="2、解压"><a href="#2、解压" class="headerlink" title="2、解压"></a>2、解压</h3><pre class=" language-shell"><code class="language-shell">tar -zxvf frp_0.44.0_linux_amd64.tar.gz</code></pre><h3 id="3、移动到-x2F-usr-x2F-local下吧并重命名，个人习惯"><a href="#3、移动到-x2F-usr-x2F-local下吧并重命名，个人习惯" class="headerlink" title="3、移动到/usr/local下吧并重命名，个人习惯"></a>3、移动到/usr/local下吧并重命名，个人习惯</h3><pre class=" language-shell"><code class="language-shell">mv frp_0.44.0_linux_amd64 /usr/local/frp</code></pre><h3 id="4、cd到-x2F-usr-x2F-local-x2F-frp"><a href="#4、cd到-x2F-usr-x2F-local-x2F-frp" class="headerlink" title="4、cd到/usr/local/frp"></a>4、cd到/usr/local/frp</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local/frp/</code></pre><h3 id="5、删除没有的配置文件（我们这里作为服务端，把客户端相关的配置文件删除了吧）"><a href="#5、删除没有的配置文件（我们这里作为服务端，把客户端相关的配置文件删除了吧）" class="headerlink" title="5、删除没有的配置文件（我们这里作为服务端，把客户端相关的配置文件删除了吧）"></a>5、删除没有的配置文件（我们这里作为服务端，把客户端相关的配置文件删除了吧）</h3><pre class=" language-shell"><code class="language-shell">rm -f frpc*</code></pre><h3 id="6、修改配置文件"><a href="#6、修改配置文件" class="headerlink" title="6、修改配置文件"></a>6、修改配置文件</h3><pre class=" language-shell"><code class="language-shell">vim frps.ini</code></pre><pre class=" language-shell"><code class="language-shell"># frps.ini[common]bind_port = 7000authentication_method = token# 认证密码，需要与客户端一致token = 12345678</code></pre><h3 id="7、配置成服务的方式启动吧"><a href="#7、配置成服务的方式启动吧" class="headerlink" title="7、配置成服务的方式启动吧"></a>7、配置成服务的方式启动吧</h3><pre class=" language-shell"><code class="language-shell">sudo vi /etc/systemd/system/frps.service</code></pre><pre class=" language-shell"><code class="language-shell">[Unit]Description=frps daemonAfter=syslog.target  network.targetWants=network.target [Service]Type=simpleExecStart=/usr/local/frp/frps -c /usr/local/frp/frps.ini [Install]WantedBy=multi-user.target</code></pre><h3 id="8、一些命令"><a href="#8、一些命令" class="headerlink" title="8、一些命令"></a>8、一些命令</h3><pre class=" language-shell"><code class="language-shell">systemctl enable frps</code></pre><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><pre class=" language-shell"><code class="language-shell">systemctl start frps</code></pre><h5 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h5><pre class=" language-shell"><code class="language-shell">systemctl stop frps</code></pre><h2 id="客户端虚拟机配置如下："><a href="#客户端虚拟机配置如下：" class="headerlink" title="客户端虚拟机配置如下："></a>客户端虚拟机配置如下：</h2><h3 id="1、下载frp-1"><a href="#1、下载frp-1" class="headerlink" title="1、下载frp"></a>1、下载frp</h3><pre class=" language-shell"><code class="language-shell">wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_amd64.tar.gz</code></pre><h3 id="2、解压-1"><a href="#2、解压-1" class="headerlink" title="2、解压"></a>2、解压</h3><pre class=" language-shell"><code class="language-shell">tar -zxvf frp_0.44.0_linux_amd64.tar.gz</code></pre><h3 id="3、移动到-x2F-use-x2F-local下吧并重命名，个人习惯"><a href="#3、移动到-x2F-use-x2F-local下吧并重命名，个人习惯" class="headerlink" title="3、移动到/use/local下吧并重命名，个人习惯"></a>3、移动到/use/local下吧并重命名，个人习惯</h3><pre class=" language-shell"><code class="language-shell">mv frp_0.44.0_linux_amd64 /usr/local/frp</code></pre><h3 id="4、cd到-x2F-usr-x2F-local-x2F-frp-1"><a href="#4、cd到-x2F-usr-x2F-local-x2F-frp-1" class="headerlink" title="4、cd到/usr/local/frp"></a>4、cd到/usr/local/frp</h3><pre class=" language-shell"><code class="language-shell">cd /usr/local/frp/</code></pre><h3 id="5、删除没有的配置文件（我们这里作为客户端，把服务端相关的配置文件删除了吧）"><a href="#5、删除没有的配置文件（我们这里作为客户端，把服务端相关的配置文件删除了吧）" class="headerlink" title="5、删除没有的配置文件（我们这里作为客户端，把服务端相关的配置文件删除了吧）"></a>5、删除没有的配置文件（我们这里作为客户端，把服务端相关的配置文件删除了吧）</h3><pre class=" language-shell"><code class="language-shell">rm -f frps*</code></pre><h3 id="6、修改配置文件-frpc-ini"><a href="#6、修改配置文件-frpc-ini" class="headerlink" title="6、修改配置文件 frpc.ini"></a>6、修改配置文件 frpc.ini</h3><pre class=" language-shell"><code class="language-shell">vim frpc.ini</code></pre><pre class=" language-shell"><code class="language-shell"># frpc.ini[common]# 对应外网服务器的ip和端口server_addr = 43.142.62.156server_port = 7000authentication_method = token# 认证密码，需要与服务端一致token = 12345678[ssh]type = tcplocal_ip = 127.0.0.1# 本机的服务端口local_port = 22# 让外网服务器开启的端口（需要防火墙放行）remote_port = 12900</code></pre><h3 id="7、设置为启动服务"><a href="#7、设置为启动服务" class="headerlink" title="7、设置为启动服务"></a>7、设置为启动服务</h3><pre class=" language-shell"><code class="language-shell">sudo vi /etc/systemd/system/frpc.service</code></pre><pre class=" language-shell"><code class="language-shell">[Unit]Description=frpc daemonAfter=syslog.target  network.targetWants=network.target [Service]Type=simpleExecStart=/usr/local/frp/frpc -c /usr/local/frp/frpc.ini [Install]WantedBy=multi-user.target</code></pre><h3 id="8、一些命令-1"><a href="#8、一些命令-1" class="headerlink" title="8、一些命令"></a>8、一些命令</h3><pre class=" language-shell"><code class="language-shell">systemctl enable frpc</code></pre><h5 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h5><pre class=" language-shell"><code class="language-shell">systemctl start frpc</code></pre><h5 id="关闭-1"><a href="#关闭-1" class="headerlink" title="关闭"></a>关闭</h5><pre class=" language-shell"><code class="language-shell">systemctl stop frpc</code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS7 </category>
          
          <category> ssh </category>
          
          <category> frp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> ssh </tag>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh免密登录（三台虚拟机之间两两免密登录）</title>
      <link href="/yoonada/yoonada.github.io/2022/09/20/ssh-mian-mi-deng-lu-san-tai-xu-ni-ji-zhi-jian-liang-liang-mian-mi-deng-lu/"/>
      <url>/yoonada/yoonada.github.io/2022/09/20/ssh-mian-mi-deng-lu-san-tai-xu-ni-ji-zhi-jian-liang-liang-mian-mi-deng-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="现有三台CentOS7的虚拟机，要求两两之间实现免密登录"><a href="#现有三台CentOS7的虚拟机，要求两两之间实现免密登录" class="headerlink" title="现有三台CentOS7的虚拟机，要求两两之间实现免密登录"></a>现有三台CentOS7的虚拟机，要求两两之间实现免密登录</h1><p>192.168.118.128<br>192.168.118.129<br>192.168.118.130</p><h3 id="1、三台虚拟机都执行以下命令："><a href="#1、三台虚拟机都执行以下命令：" class="headerlink" title="1、三台虚拟机都执行以下命令："></a>1、三台虚拟机都执行以下命令：</h3><pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa</code></pre><h3 id="2、三台虚拟机都进入-x2F-ssh-x2F-目录（该目录存放秘钥对）"><a href="#2、三台虚拟机都进入-x2F-ssh-x2F-目录（该目录存放秘钥对）" class="headerlink" title="2、三台虚拟机都进入/.ssh/目录（该目录存放秘钥对）"></a>2、三台虚拟机都进入/.ssh/目录（该目录存放秘钥对）</h3><pre class=" language-shell"><code class="language-shell">cd ~/.ssh/</code></pre><h3 id="3、三台虚拟机都执行以下命令："><a href="#3、三台虚拟机都执行以下命令：" class="headerlink" title="3、三台虚拟机都执行以下命令："></a>3、三台虚拟机都执行以下命令：</h3><pre class=" language-shell"><code class="language-shell">touch authorized_keys</code></pre><pre class=" language-shell"><code class="language-shell">chmod 600 authorized_keys</code></pre><pre class=" language-shell"><code class="language-shell">cat id_rsa.pub >> authorized_keys</code></pre><h4 id="此时，三个虚拟机的当前目录都为-ssh下"><a href="#此时，三个虚拟机的当前目录都为-ssh下" class="headerlink" title="此时，三个虚拟机的当前目录都为.ssh下"></a>此时，三个虚拟机的当前目录都为.ssh下</h4><h3 id="4、把129的公钥追加到128的authorized-keys"><a href="#4、把129的公钥追加到128的authorized-keys" class="headerlink" title="4、把129的公钥追加到128的authorized_keys"></a>4、把129的公钥追加到128的authorized_keys</h3><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.128:/home/</code></pre><h4 id="点击切换到128的连接，在128上执行如下命令"><a href="#点击切换到128的连接，在128上执行如下命令" class="headerlink" title="点击切换到128的连接，在128上执行如下命令"></a>点击切换到128的连接，在128上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="把128的公钥追加到129的authorized-keys"><a href="#把128的公钥追加到129的authorized-keys" class="headerlink" title="把128的公钥追加到129的authorized_keys"></a>把128的公钥追加到129的authorized_keys</h4><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.129:/home/</code></pre><h4 id="点击切换到129的连接，在129上执行如下命令"><a href="#点击切换到129的连接，在129上执行如下命令" class="headerlink" title="点击切换到129的连接，在129上执行如下命令"></a>点击切换到129的连接，在129上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="此时，128、129两两之间可实现ssh密码登录，接下来128与130之间以及129与130之间类似"><a href="#此时，128、129两两之间可实现ssh密码登录，接下来128与130之间以及129与130之间类似" class="headerlink" title="此时，128、129两两之间可实现ssh密码登录，接下来128与130之间以及129与130之间类似"></a>此时，128、129两两之间可实现ssh密码登录，接下来128与130之间以及129与130之间类似</h4><h3 id="5、把130的公钥追加到128的authorized-keys-130上"><a href="#5、把130的公钥追加到128的authorized-keys-130上" class="headerlink" title="5、把130的公钥追加到128的authorized_keys  (130上)"></a>5、把130的公钥追加到128的authorized_keys  (130上)</h3><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.128:/home/</code></pre><h4 id="点击切换到128的连接，在128上执行如下命令-1"><a href="#点击切换到128的连接，在128上执行如下命令-1" class="headerlink" title="点击切换到128的连接，在128上执行如下命令"></a>点击切换到128的连接，在128上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="把128的公钥追加到130的authorized-keys"><a href="#把128的公钥追加到130的authorized-keys" class="headerlink" title="把128的公钥追加到130的authorized_keys"></a>把128的公钥追加到130的authorized_keys</h4><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.130:/home/</code></pre><h4 id="点击切换到130的连接，在130上执行如下命令"><a href="#点击切换到130的连接，在130上执行如下命令" class="headerlink" title="点击切换到130的连接，在130上执行如下命令"></a>点击切换到130的连接，在130上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="此时实现了128与130之间的免密"><a href="#此时实现了128与130之间的免密" class="headerlink" title="此时实现了128与130之间的免密"></a>此时实现了128与130之间的免密</h4><h3 id="6、把130的公钥追加到129的authorized-keys-130上"><a href="#6、把130的公钥追加到129的authorized-keys-130上" class="headerlink" title="6、把130的公钥追加到129的authorized_keys (130上)"></a>6、把130的公钥追加到129的authorized_keys (130上)</h3><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.129:/home/</code></pre><h4 id="点击切换到129的连接，在129上执行如下命令-1"><a href="#点击切换到129的连接，在129上执行如下命令-1" class="headerlink" title="点击切换到129的连接，在129上执行如下命令"></a>点击切换到129的连接，在129上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="把129的公钥追加到130的authorized-keys"><a href="#把129的公钥追加到130的authorized-keys" class="headerlink" title="把129的公钥追加到130的authorized_keys"></a>把129的公钥追加到130的authorized_keys</h4><pre class=" language-shell"><code class="language-shell">scp id_rsa.pub 192.168.118.130:/home/</code></pre><h4 id="点击切换到130的连接，在130上执行如下命令-1"><a href="#点击切换到130的连接，在130上执行如下命令-1" class="headerlink" title="点击切换到130的连接，在130上执行如下命令"></a>点击切换到130的连接，在130上执行如下命令</h4><pre class=" language-shell"><code class="language-shell">cat ../../home/id_rsa.pub >> ./authorized_keys</code></pre><h4 id="此时实现了129与130之间的免密"><a href="#此时实现了129与130之间的免密" class="headerlink" title="此时实现了129与130之间的免密"></a>此时实现了129与130之间的免密</h4><h3 id="6、两两之间校验"><a href="#6、两两之间校验" class="headerlink" title="6、两两之间校验"></a>6、两两之间校验</h3><pre class=" language-shell"><code class="language-shell">ssh root@192.168.118.128</code></pre><pre class=" language-shell"><code class="language-shell">ssh root@192.168.118.129</code></pre><pre class=" language-shell"><code class="language-shell">ssh root@192.168.118.130</code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS7 </category>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装jdk</title>
      <link href="/yoonada/yoonada.github.io/2022/08/04/centos7-an-zhuang-jdk/"/>
      <url>/yoonada/yoonada.github.io/2022/08/04/centos7-an-zhuang-jdk/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">cd /usr/local</code></pre><pre class=" language-shell"><code class="language-shell">wget https://yoondada.oss-cn-shenzhen.aliyuncs.com/software/CentOS7/jdk-8u381-linux-x64.tar.gz</code></pre><pre class=" language-shell"><code class="language-shell">tar -zxvf jdk-8u381-linux-x64.tar.gz</code></pre><pre class=" language-shell"><code class="language-shell">mv jdk-8u381-linux-x64 jdk</code></pre><pre class=" language-shell"><code class="language-shell">vim /etc/profile</code></pre><pre class=" language-shell"><code class="language-shell">JAVA_HOME=/usr/local/jdkCLASSPATH=$JAVA_HOME/lib/PATH=$PATH:$JAVA_HOME/binexport PATH JAVA_HOME CLASSPATH</code></pre><pre class=" language-shell"><code class="language-shell">:wq</code></pre><pre class=" language-shell"><code class="language-shell">source /etc/profile</code></pre><pre class=" language-shell"><code class="language-shell">javajavacjava -version</code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS7 </category>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装maven</title>
      <link href="/yoonada/yoonada.github.io/2022/08/04/centos7-an-zhuang-maven/"/>
      <url>/yoonada/yoonada.github.io/2022/08/04/centos7-an-zhuang-maven/</url>
      
        <content type="html"><![CDATA[<h2 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h2><pre class=" language-shell"><code class="language-shell">cd /usr/local</code></pre><h2 id="下载maven"><a href="#下载maven" class="headerlink" title="下载maven"></a>下载maven</h2><pre class=" language-shell"><code class="language-shell">wget https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</code></pre><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class=" language-shell"><code class="language-shell">tar -xvf apache-maven-3.6.3-bin.tar.gz</code></pre><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><pre class=" language-shell"><code class="language-shell">mv apache-maven-3.6.3 maven</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><pre class=" language-shell"><code class="language-shell">vim /etc/profile</code></pre><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><pre class=" language-shell"><code class="language-shell">export PATH=/usr/local/maven/bin:$PATH</code></pre><h2 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h2><pre class=" language-shell"><code class="language-shell">source /etc/profile</code></pre><h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><pre class=" language-shell"><code class="language-shell">mvn -V</code></pre><h2 id="进入maven"><a href="#进入maven" class="headerlink" title="进入maven"></a>进入maven</h2><pre class=" language-shell"><code class="language-shell">cd maven</code></pre><h2 id="创建repository目录"><a href="#创建repository目录" class="headerlink" title="创建repository目录"></a>创建repository目录</h2><pre class=" language-shell"><code class="language-shell">mkdir repository</code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><pre class=" language-shell"><code class="language-shell">cd conf/</code></pre><pre class=" language-shell"><code class="language-shell">vim settings.xml</code></pre><h2 id="配置依赖存储路径"><a href="#配置依赖存储路径" class="headerlink" title="配置依赖存储路径"></a>配置依赖存储路径</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>localRepository<span class="token operator">></span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>maven<span class="token operator">/</span>repository<span class="token operator">&lt;</span><span class="token operator">/</span>localRepository<span class="token operator">></span></code></pre><h2 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>mirror<span class="token operator">></span>    <span class="token operator">&lt;</span>id<span class="token operator">></span>nexus<span class="token operator">-</span>aliyun<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>    <span class="token operator">&lt;</span>mirrorOf<span class="token operator">></span>central<span class="token operator">&lt;</span><span class="token operator">/</span>mirrorOf<span class="token operator">></span>    <span class="token operator">&lt;</span>name<span class="token operator">></span>nexus<span class="token operator">-</span>aliyun<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>url<span class="token operator">></span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>nexus<span class="token operator">/</span>content<span class="token operator">/</span>groups<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mirror<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose命令</title>
      <link href="/yoonada/yoonada.github.io/2022/08/04/docker-compose-ming-ling/"/>
      <url>/yoonada/yoonada.github.io/2022/08/04/docker-compose-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="停掉服务，删除容器，不删除镜像"><a href="#停掉服务，删除容器，不删除镜像" class="headerlink" title="停掉服务，删除容器，不删除镜像"></a>停掉服务，删除容器，不删除镜像</h2><pre class=" language-shell"><code class="language-shell">docker-compose down</code></pre><h2 id="重启-x2F-开始-x2F-停止服务"><a href="#重启-x2F-开始-x2F-停止服务" class="headerlink" title="重启/开始/停止服务"></a>重启/开始/停止服务</h2><pre class=" language-shell"><code class="language-shell">docker-compose restart/start/stop [服务名称]</code></pre><h2 id="运行某个服务"><a href="#运行某个服务" class="headerlink" title="运行某个服务"></a>运行某个服务</h2><pre class=" language-shell"><code class="language-shell">docker-compose run [服务名称]</code></pre><h2 id="查看服务中使用的镜像"><a href="#查看服务中使用的镜像" class="headerlink" title="查看服务中使用的镜像"></a>查看服务中使用的镜像</h2><pre class=" language-shell"><code class="language-shell">docker-compose images [服务名称]</code></pre><h2 id="重新构建（强制删除之前的镜像重新打）并启动"><a href="#重新构建（强制删除之前的镜像重新打）并启动" class="headerlink" title="重新构建（强制删除之前的镜像重新打）并启动"></a>重新构建（强制删除之前的镜像重新打）并启动</h2><pre class=" language-shell"><code class="language-shell">docker-compose up -d --build --force-recreate</code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker-compose </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装kafka</title>
      <link href="/yoonada/yoonada.github.io/2022/08/04/docker-an-zhuang-kafka/"/>
      <url>/yoonada/yoonada.github.io/2022/08/04/docker-an-zhuang-kafka/</url>
      
        <content type="html"><![CDATA[<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre class=" language-sh"><code class="language-sh">docker pull wurstmeister/zookeeper</code></pre><pre class=" language-sh"><code class="language-sh">docker pull wurstmeister/kafka</code></pre><h2 id="启动镜像"><a href="#启动镜像" class="headerlink" title="启动镜像"></a>启动镜像</h2><h3 id="启动Zookeeper"><a href="#启动Zookeeper" class="headerlink" title="启动Zookeeper"></a>启动Zookeeper</h3><pre class=" language-sh"><code class="language-sh">docker run -d --name zookeeper -p 2181:2181 -v /etc/localtime:/etc/localtime wurstmeister/zookeeper</code></pre><pre class=" language-sh"><code class="language-sh">docker run -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=192.168.118.128:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.118.128:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka    docker run -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=10.0.16.11:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://10.0.16.11:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka  docker run -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=172.17.0.7:2181 -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://10.0.16.11:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka  10.0.16.11</code></pre><pre class=" language-sh"><code class="language-sh">docker run -d \    -p 9001:8080 \    -v /opt/kafka-map/data:/usr/local/kafka-map/data \    -e DEFAULT_USERNAME=admin \    -e DEFAULT_PASSWORD=admin \    --name kafka-map \    --restart always dushixiang/kafka-map:latest</code></pre>]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo安装与搭建</title>
      <link href="/yoonada/yoonada.github.io/2022/07/01/hexo-an-zhuang-yu-da-jian/"/>
      <url>/yoonada/yoonada.github.io/2022/07/01/hexo-an-zhuang-yu-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><pre class=" language-shell"><code class="language-shell">npm install -g hexo-cli</code></pre><h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><pre class=" language-shell"><code class="language-shell">hexo init blog</code></pre><pre class=" language-shell"><code class="language-shell">cd blog</code></pre><pre class=" language-shell"><code class="language-shell">npm install</code></pre><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><pre class=" language-shell"><code class="language-shell">hexo s</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker常用命令</title>
      <link href="/yoonada/yoonada.github.io/2022/07/01/docker-chang-yong-ming-ling/"/>
      <url>/yoonada/yoonada.github.io/2022/07/01/docker-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="启动docker服务"><a href="#启动docker服务" class="headerlink" title="启动docker服务"></a>启动docker服务</h2><pre class=" language-shell"><code class="language-shell">systemctl start docker</code></pre><h2 id="关闭docker服务"><a href="#关闭docker服务" class="headerlink" title="关闭docker服务"></a>关闭docker服务</h2><pre class=" language-shell"><code class="language-shell">systemctl stop docker</code></pre><h2 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h2><pre class=" language-shell"><code class="language-shell">systemctl restart docker</code></pre><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><pre class=" language-shell"><code class="language-shell">docker search java</code></pre><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre class=" language-shell"><code class="language-shell">docker pull java:8</code></pre><h2 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h2><pre class=" language-shell"><code class="language-shell">docker images</code></pre><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><ul><li>指定名称删除镜像</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi java:8</code></pre><ul><li>指定名称删除镜像（强制）</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi -f java:8</code></pre><ul><li>删除所有没有引用的镜像</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi `docker images | grep none | awk '{print $3}'`</code></pre><ul><li>强制删除所有镜像</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi -f $(docker images)</code></pre><h2 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h2><ul><li>列出运行中的容器</li></ul><pre class=" language-shell"><code class="language-shell">docker ps</code></pre><ul><li>列出所有容器</li></ul><pre class=" language-shell"><code class="language-shell">docker ps -a</code></pre><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><pre class=" language-shell"><code class="language-shell">docker stop $ContainerName(or $ContainerId)</code></pre><h2 id="强制停止容器"><a href="#强制停止容器" class="headerlink" title="强制停止容器"></a>强制停止容器</h2><pre class=" language-shell"><code class="language-shell">docker kill $ContainerName</code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre class=" language-shell"><code class="language-shell">docker start $ContainerName</code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><ul><li>先查询出容器的pid</li></ul><pre class=" language-shell"><code class="language-shell">docker inspect --format "{{.State.Pid}}" $ContainerName</code></pre><ul><li>根据容器的pid进入容器</li></ul><pre class=" language-shell"><code class="language-shell">nsenter --target "$pid" --mount --uts --ipc --net --pid</code></pre><h2 id="查看容器的IP地址"><a href="#查看容器的IP地址" class="headerlink" title="查看容器的IP地址"></a>查看容器的IP地址</h2><pre class=" language-shell"><code class="language-shell">docker inspect --format '{{ .NetworkSettings.IPAddress }}' $ContainerName</code></pre><h2 id="将容器启动方式改为always"><a href="#将容器启动方式改为always" class="headerlink" title="将容器启动方式改为always"></a>将容器启动方式改为always</h2><pre class=" language-shell"><code class="language-shell"># 将容器启动方式改为alwaysdocker container update --restart=always $ContainerName</code></pre><h2 id="同步宿主机时间到容器"><a href="#同步宿主机时间到容器" class="headerlink" title="同步宿主机时间到容器"></a>同步宿主机时间到容器</h2><pre class=" language-shell"><code class="language-shell">docker cp /etc/localtime $ContainerName:/etc/</code></pre><h2 id="指定容器时区"><a href="#指定容器时区" class="headerlink" title="指定容器时区"></a>指定容器时区</h2><pre class=" language-shell"><code class="language-shell">docker run -p 80:80 --name nginx \-e TZ="Asia/Shanghai" \-d nginx:1.17.0</code></pre><h2 id="查看容器资源占用状况"><a href="#查看容器资源占用状况" class="headerlink" title="查看容器资源占用状况"></a>查看容器资源占用状况</h2><ul><li>查看指定容器资源占用状况，比如cpu、内存、网络、io状态</li></ul><pre class=" language-shell"><code class="language-shell">docker stats $ContainerName</code></pre><ul><li>查看所有容器资源占用情况</li></ul><pre class=" language-shell"><code class="language-shell">docker stats -a</code></pre><h2 id="查看容器磁盘使用情况"><a href="#查看容器磁盘使用情况" class="headerlink" title="查看容器磁盘使用情况"></a>查看容器磁盘使用情况</h2><pre class=" language-shell"><code class="language-shell">docker system df</code></pre><h2 id="执行容器内部命令"><a href="#执行容器内部命令" class="headerlink" title="执行容器内部命令"></a>执行容器内部命令</h2><pre class=" language-shell"><code class="language-shell">docker exec -it $ContainerName /bin/bash</code></pre><h2 id="指定账号进入容器内部"><a href="#指定账号进入容器内部" class="headerlink" title="指定账号进入容器内部"></a>指定账号进入容器内部</h2><pre class=" language-shell"><code class="language-shell"># 使用root账号进入容器内部docker exec -it --user root $ContainerName /bin/bash</code></pre><h2 id="查看所有网络"><a href="#查看所有网络" class="headerlink" title="查看所有网络"></a>查看所有网络</h2><pre class=" language-shell"><code class="language-shell">docker network ls</code></pre><h2 id="创建外部网络"><a href="#创建外部网络" class="headerlink" title="创建外部网络"></a>创建外部网络</h2><pre class=" language-shell"><code class="language-shell">docker network create -d bridge my-bridge-network</code></pre><h2 id="指定容器网络"><a href="#指定容器网络" class="headerlink" title="指定容器网络"></a>指定容器网络</h2><pre class=" language-shell"><code class="language-shell">docker run -p 80:80 --name nginx \--network my-bridge-network \-d nginx:1.17.0</code></pre><h2 id="Docker容器清理"><a href="#Docker容器清理" class="headerlink" title="Docker容器清理"></a>Docker容器清理</h2><ul><li>查看Docker占用的磁盘空间情况</li></ul><pre class=" language-shell"><code class="language-shell">docker system df</code></pre><ul><li>删除所有关闭的容器</li></ul><pre class=" language-shell"><code class="language-shell">docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs docker rm</code></pre><ul><li>删除所有dangling镜像(没有Tag的镜像)</li></ul><pre class=" language-shell"><code class="language-shell">docker rmi $(docker images | grep "^<none>" | awk "{print $3}")</code></pre><ul><li>删除所有dangling数据卷(即无用的 volume)</li></ul><pre class=" language-shell"><code class="language-shell">docker volume rm $(docker volume ls -qf dangling=true)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh配置</title>
      <link href="/yoonada/yoonada.github.io/2022/07/01/git-pei-zhi-ssh/"/>
      <url>/yoonada/yoonada.github.io/2022/07/01/git-pei-zhi-ssh/</url>
      
        <content type="html"><![CDATA[<h2 id="配置用户名"><a href="#配置用户名" class="headerlink" title="配置用户名"></a>配置用户名</h2><pre class=" language-shell"><code class="language-shell">git config --global user.name "yoonada"</code></pre><h2 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h2><pre class=" language-shell"><code class="language-shell">git config --global user.email "m15602498163@163.com"</code></pre><h2 id="生成-ssh-key"><a href="#生成-ssh-key" class="headerlink" title="生成 ssh key"></a>生成 ssh key</h2><pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa -b 4096 -C "m15602498163@163.com"</code></pre><h2 id="生成路径"><a href="#生成路径" class="headerlink" title="生成路径"></a>生成路径</h2><pre class=" language-text"><code class="language-text">window的生成路径：C:\Users\用户\.sshLinux的生成路径：/etc/ssh</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装RabbitMQ</title>
      <link href="/yoonada/yoonada.github.io/2022/07/01/docker-an-zhuang-rabbitmq/"/>
      <url>/yoonada/yoonada.github.io/2022/07/01/docker-an-zhuang-rabbitmq/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">docker run --name rabbitmq -p 5672:5672 -p 15672:15672 -d --restart=always rabbitmq:management</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装redis</title>
      <link href="/yoonada/yoonada.github.io/2022/07/01/docker-an-zhuang-redis/"/>
      <url>/yoonada/yoonada.github.io/2022/07/01/docker-an-zhuang-redis/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">docker run --name redis -p 6380:6379 -d --restart=always redis:latest redis-server --appendonly yes --requirepass "DD123456aa"</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装nacos</title>
      <link href="/yoonada/yoonada.github.io/2022/07/01/docker-an-zhuang-nacos/"/>
      <url>/yoonada/yoonada.github.io/2022/07/01/docker-an-zhuang-nacos/</url>
      
        <content type="html"><![CDATA[<h2 id="拉取docker镜像"><a href="#拉取docker镜像" class="headerlink" title="拉取docker镜像"></a>拉取docker镜像</h2><pre class=" language-shell"><code class="language-shell">docker pull nacos/nacos-server:1.4.2</code></pre><h2 id="创建临时容器（用来拷贝配置、日志使用）"><a href="#创建临时容器（用来拷贝配置、日志使用）" class="headerlink" title="创建临时容器（用来拷贝配置、日志使用）"></a>创建临时容器（用来拷贝配置、日志使用）</h2><pre class=" language-shell"><code class="language-shell">docker run -p 8848:8848 --name nacostest -d nacos/nacos-server:1.4.2</code></pre><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><pre class=" language-shell"><code class="language-shell">mkdir -p /mydata/nacos/conf</code></pre><pre class=" language-shell"><code class="language-shell">mkdir -p /mydata/nacos/logs</code></pre><h2 id="配置文件复制"><a href="#配置文件复制" class="headerlink" title="配置文件复制"></a>配置文件复制</h2><pre class=" language-shell"><code class="language-shell">docker cp nacostest:/home/nacos/logs/ /mydata/nacos/</code></pre><pre class=" language-shell"><code class="language-shell">docker cp nacostest:/home/nacos/conf/ /mydata/nacos/</code></pre><h2 id="删除临时容器"><a href="#删除临时容器" class="headerlink" title="删除临时容器"></a>删除临时容器</h2><pre class=" language-shell"><code class="language-shell">docker stop nacostest</code></pre><pre class=" language-shell"><code class="language-shell">docker rm nacostest</code></pre><h2 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h2><pre class=" language-shell"><code class="language-shell">docker run -d \-e MODE=standalone \-e SPRING_DATASOURCE_PLATFORM=mysql \-e MYSQL_SERVICE_HOST=43.142.62.156 \-e MYSQL_SERVICE_PORT=3307 \-e MYSQL_SERVICE_USER=root \-e MYSQL_SERVICE_PASSWORD=DD123456aa \-e MYSQL_SERVICE_DB_NAME=nacos_config \-e TIME_ZONE='Asia/Shanghai' \-v /mydata/nacos/logs:/home/nacos/logs \-v /mydata/nacos/conf:/home/nacos/conf \-p 8848:8848 \--name nacos \--restart=always \nacos/nacos-server:1.4.2</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装MySQL</title>
      <link href="/yoonada/yoonada.github.io/2022/07/01/docker-an-zhuang-mysql/"/>
      <url>/yoonada/yoonada.github.io/2022/07/01/docker-an-zhuang-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="拉取5-7的镜像"><a href="#拉取5-7的镜像" class="headerlink" title="拉取5.7的镜像"></a>拉取5.7的镜像</h2><pre class=" language-shell"><code class="language-shell">docker pull mysql:5.7</code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre class=" language-shell"><code class="language-shell">docker run --name mysql -p 3307:3306 --restart=always -e MYSQL_ROOT_PASSWORD=DD123456aa -d mysql:5.7</code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><pre class=" language-shell"><code class="language-shell">docker exec -it mysql bash</code></pre><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><pre class=" language-shell"><code class="language-shell">mysql -u root -p</code></pre><h2 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h2><pre class=" language-shell"><code class="language-shell">ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'DD123456aa';</code></pre><h2 id="刷新"><a href="#刷新" class="headerlink" title="刷新"></a>刷新</h2><pre class=" language-shell"><code class="language-shell">flush privileges;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7常用命令</title>
      <link href="/yoonada/yoonada.github.io/2022/07/01/centos7-chang-yong-ming-ling/"/>
      <url>/yoonada/yoonada.github.io/2022/07/01/centos7-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="开启防火墙"><a href="#开启防火墙" class="headerlink" title="开启防火墙"></a>开启防火墙</h2><pre class=" language-shell"><code class="language-shell">systemctl start firewalld</code></pre><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><pre class=" language-shell"><code class="language-shell">systemctl stop firewalld</code></pre><h2 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h2><pre class=" language-shell"><code class="language-shell">systemctl status firewalld </code></pre><h2 id="开放某个端口"><a href="#开放某个端口" class="headerlink" title="开放某个端口"></a>开放某个端口</h2><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone=public --add-port=80/tcp --permanent</code></pre><h2 id="重新加载配置"><a href="#重新加载配置" class="headerlink" title="重新加载配置"></a>重新加载配置</h2><pre class=" language-shell"><code class="language-shell">firewall-cmd --reload</code></pre><h2 id="查看已经开放的端口"><a href="#查看已经开放的端口" class="headerlink" title="查看已经开放的端口"></a>查看已经开放的端口</h2><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone=public --list-ports</code></pre><h2 id="查找（在-中填写你要的查找的路径）"><a href="#查找（在-中填写你要的查找的路径）" class="headerlink" title="查找（在**中填写你要的查找的路径）"></a>查找（在**中填写你要的查找的路径）</h2><pre class=" language-shell"><code class="language-shell">find / -name **</code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS7 </category>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装nginx</title>
      <link href="/yoonada/yoonada.github.io/2022/07/01/centos7-an-zhuang-nginx/"/>
      <url>/yoonada/yoonada.github.io/2022/07/01/centos7-an-zhuang-nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><pre class=" language-shell"><code class="language-shell">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</code></pre><h2 id="下载稳定版本"><a href="#下载稳定版本" class="headerlink" title="下载稳定版本"></a>下载稳定版本</h2><pre class=" language-shell"><code class="language-shell">wget http://nginx.org/download/nginx-1.16.1.tar.gz</code></pre><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class=" language-shell"><code class="language-shell">tar -zxvf nginx-1.16.1.tar.gz</code></pre><h2 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h2><pre class=" language-shell"><code class="language-shell">cd nginx-1.16.1</code></pre><h2 id="配置编译"><a href="#配置编译" class="headerlink" title="配置编译"></a>配置编译</h2><pre class=" language-shell"><code class="language-shell">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-shell"><code class="language-shell">make && make install</code></pre><h2 id="被安装的目录"><a href="#被安装的目录" class="headerlink" title="被安装的目录"></a>被安装的目录</h2><pre class=" language-shell"><code class="language-shell">/usr/local/nginx/</code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装docker-compose</title>
      <link href="/yoonada/yoonada.github.io/2022/07/01/centos7-an-zhuang-docker-compose/"/>
      <url>/yoonada/yoonada.github.io/2022/07/01/centos7-an-zhuang-docker-compose/</url>
      
        <content type="html"><![CDATA[<pre class=" language-shell"><code class="language-shell">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose</code></pre><pre class=" language-shell"><code class="language-shell">chmod +x /usr/local/bin/docker-compose</code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装docker</title>
      <link href="/yoonada/yoonada.github.io/2022/07/01/centos7-an-zhuang-docker/"/>
      <url>/yoonada/yoonada.github.io/2022/07/01/centos7-an-zhuang-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><pre class=" language-shell"><code class="language-shell">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre><h2 id="安装配置相关依赖"><a href="#安装配置相关依赖" class="headerlink" title="安装配置相关依赖"></a>安装配置相关依赖</h2><pre class=" language-shell"><code class="language-shell">sudo yum install -y yum-utils</code></pre><pre class=" language-shell"><code class="language-shell">sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/CentOS7/docker-ce.repo</code></pre><p>如果你的服务器连接官网超时，可换为阿里云的</p><pre class=" language-shell"><code class="language-shell">sudo yum-config-manager \    --add-repo \    http://mirrors.aliyun.com/docker-ce/linux/CentOS7/docker-ce.repo</code></pre><h2 id="安装docker引擎"><a href="#安装docker引擎" class="headerlink" title="安装docker引擎"></a>安装docker引擎</h2><pre class=" language-shell"><code class="language-shell">sudo yum install docker-ce docker-ce-cli containerd.io</code></pre><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><pre class=" language-shell"><code class="language-shell">sudo systemctl start docker</code></pre><h2 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h2><pre class=" language-shell"><code class="language-shell">sudo systemctl enable docker</code></pre><h2 id="验证是否正确安装"><a href="#验证是否正确安装" class="headerlink" title="验证是否正确安装"></a>验证是否正确安装</h2><pre class=" language-shell"><code class="language-shell">sudo docker run hello-world</code></pre><h2 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h2><pre class=" language-shell"><code class="language-shell">sudo mkdir -p /etc/docker</code></pre><pre class=" language-shell"><code class="language-shell">sudo tee /etc/docker/daemon.json <<-'EOF'{  "registry-mirrors": ["https://9w9zqgnf.mirror.aliyuncs.com"]}EOF</code></pre><pre class=" language-shell"><code class="language-shell">sudo systemctl daemon-reload</code></pre><pre class=" language-shell"><code class="language-shell">sudo systemctl restart docker</code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS7 </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
